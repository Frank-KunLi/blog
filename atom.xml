<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>memset0&#39;s blog</title>
  
  <subtitle>落霞与孤鹜齐飞，秋水共长天一色</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memset0.cn/"/>
  <updated>2018-12-09T02:53:08.800Z</updated>
  <id>https://memset0.cn/</id>
  
  <author>
    <name>memset0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>洛谷2606 - [ZJOI2010]排列计数</title>
    <link href="https://memset0.cn/solution/luogu/2606/"/>
    <id>https://memset0.cn/solution/luogu/2606/</id>
    <published>2018-12-09T02:39:31.000Z</published>
    <updated>2018-12-09T02:53:08.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原问题等价于询问节点个数为 $ n $ 的完全二叉树形态的二叉堆的个数。</p><p>考虑递推，用 $ f(i) $ 表示 $ i $ 个节点时的答案。考虑除去此时的根节点外，根的左右子树大小分别为 $ l $ 和 $ r $ （可由完全二叉树这一性质计算得出）。此时根节点的编号肯定为 $ 1 $ ，而 $ f(l) $ 和 $ f(r) $ 分别是子树中的根节点编号为 $ 1 $ 的情况，若把编号分配，相当于求两个有序数列并成一个的方案数，即 $ C _ { l + r} ^ l $。得出：</p><p>$$ f(i) = f(l) \times f(r) \times C _ { l + r } ^ l $$</p><p>预处理阶乘递推即可。若 $ n &gt; q $ 则需要卢卡斯定理简单处理。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2018.12.07 13:51:11</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">char</span> <span class="title">c</span>) &#123;</span></span><br><span class="line">    print(x), <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, l, r, t;</span><br><span class="line"><span class="keyword">int</span> fac[N], inv[N], ans[N], lg2[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> (ll)fac[n] * inv[m] % p * inv[n - m] % p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> m ? (ll)c(n % p, m % p) * lucas(n / p, m / p) % p : <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(p);</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">std</span>::min(n, p); i++) fac[i] = (ll)fac[i - <span class="number">1</span>] * i % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">std</span>::min(n, p); i++) inv[i] = (ll)(p - p / i) * inv[p % i] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">std</span>::min(n, p); i++) inv[i] = (ll)inv[i] * inv[i - <span class="number">1</span>] % p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n + <span class="number">1</span>; i++) lg2[<span class="number">1</span> &lt;&lt; i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++) lg2[i] = lg2[lg2[i] ? i : i - <span class="number">1</span>];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        t = lg2[i + <span class="number">1</span>], l = <span class="built_in">std</span>::min((<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span>, i - (<span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>))), r = i - <span class="number">1</span> - l;</span><br><span class="line">        ans[i] = (ll)lucas(i - <span class="number">1</span>, l) * ans[l] % p * ans[r] % p;</span><br><span class="line">    &#125;</span><br><span class="line">    print(ans[n], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原问题等价于询问节点个数为 $ n $ 的完全二叉树形态的二叉堆的个数。&lt;/p&gt;
&lt;p&gt;考虑递推，用 $ f(i) $ 表示 $ i $ 个节点时的答案。考虑除去此时的根节点外，根的左右子树大小分别为 $ l $ 和 $ r $ （可由完全二叉树这一性质计算得出）。此时根节点的编号肯定为 $ 1 $ ，而 $ f(l) $ 和 $ f(r) $ 分别是子树中的根节点编号为 $ 1 $ 的情况，若把编号分配，相当于求两个有序数列并成一个的方案数，即 $ C _ { l + r} ^ l $。得出：&lt;/p&gt;
&lt;p&gt;$$ f(i) = f(l) \times f(r) \times C _ { l + r } ^ l $$&lt;/p&gt;
&lt;p&gt;预处理阶乘递推即可。若 $ n &amp;gt; q $ 则需要卢卡斯定理简单处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="数学，数论" scheme="https://memset0.cn/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ4939 - [YNOI2016] 掉进兔子洞</title>
    <link href="https://memset0.cn/solution/bzoj/4939/"/>
    <id>https://memset0.cn/solution/bzoj/4939/</id>
    <published>2018-12-08T10:15:32.000Z</published>
    <updated>2018-12-09T02:10:40.007Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>bitset 套莫队板子题。</p><p>题意是如果第一个区间里有 $ a $ 个 $ x $ ，第二个区间 $ b $ 个，第三个区间 $ c $ 个，只会对答案产生 $ \min(a, b, c) $ 的贡献；每次询问给你三个区间，问你三个区间里能产生这样的贡献的大小。</p><p>考虑 bitset 套莫队。通过一个简单的 trick 似的 bitset 既能反映出每种数又能反映出每种数的个数，每个查询就用三个区间的 bitset 的按位并，取结果的 count 。</p><p>然而 $ 10^5 $ 个 $ 10^5 $ 的 bitset 会 MLE 。我们把莫队分成三次，只需要三分之一的空间，可以卡进。</p><p>看起来这样 $ O(n ^ 2) $ 的复杂度过不了 $ n = 10^5 $ ，但是由于使用了 bitset 的关系，常数实际上只有 1 / 32 ，实际跑的飞快。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2018.12.07 10:39:36</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">char</span> <span class="title">c</span>) &#123;</span></span><br><span class="line">    print(x), <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ul, ur, ql, qr, pos, sqn, sqm, tail;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], id[N], ans[N], cnt[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span> &lt; N &gt; now, f[N / <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l1, r1, l2, r2, l3, r3;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read_query</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// printf("read query %d\n", i);</span></span><br><span class="line">        read(l1), read(r1), read(l2), read(r2), read(l3), read(r3);</span><br><span class="line">        ans[i] += r1 - l1 + r2 - l2 + r3 - l3 + <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; q[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query_small</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, i;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> query_small &amp;other) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l / sqn == other.l / sqn) <span class="keyword">return</span> r &lt; other.r;</span><br><span class="line">        <span class="keyword">return</span> l &lt; other.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ++cnt[x];</span><br><span class="line">    now.<span class="built_in">set</span>(x + cnt[x] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    now.reset(x + cnt[x] - <span class="number">1</span>);</span><br><span class="line">    --cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    pos = <span class="number">0</span>, tail = <span class="number">0</span>, now.reset(), <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">        id[i] = ++pos;</span><br><span class="line">        p[++tail] = (query_small)&#123;q[i].l1, q[i].r1, i&#125;;</span><br><span class="line">        p[++tail] = (query_small)&#123;q[i].l2, q[i].r2, i&#125;;</span><br><span class="line">        p[++tail] = (query_small)&#123;q[i].l3, q[i].r3, i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pos; i++) f[i].<span class="built_in">set</span>();</span><br><span class="line">    <span class="built_in">std</span>::sort(p + <span class="number">1</span>, p + tail + <span class="number">1</span>);</span><br><span class="line">    ul = <span class="number">1</span>, ur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tail; i++) &#123;</span><br><span class="line">        ql = p[i].l, qr = p[i].r;</span><br><span class="line">        <span class="keyword">while</span> (ul &gt; ql) add(a[--ul]);</span><br><span class="line">        <span class="keyword">while</span> (ur &lt; qr) add(a[++ur]);</span><br><span class="line">        <span class="keyword">while</span> (ul &lt; ql) del(a[ul++]);</span><br><span class="line">        <span class="keyword">while</span> (ur &gt; qr) del(a[ur--]);</span><br><span class="line">        f[id[p[i].i]] &amp;= now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; i++) ans[i] -= f[id[i]].count() * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m), sqn = <span class="built_in">sqrt</span>(n), sqm = m / <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), b[i] = a[i];</span><br><span class="line">    <span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">std</span>::lower_bound(b + <span class="number">1</span>, b + n + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) q[i].read_query(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i += sqm) solve(i, <span class="built_in">std</span>::min(m, i + sqm - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) print(ans[i], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bitset 套莫队板子题。&lt;/p&gt;
&lt;p&gt;题意是如果第一个区间里有 $ a $ 个 $ x $ ，第二个区间 $ b $ 个，第三个区间 $ c $ 个，只会对答案产生 $ \min(a, b, c) $ 的贡献；每次询问给你三个区间，问你三个区间里能产生这样的贡献的大小。&lt;/p&gt;
&lt;p&gt;考虑 bitset 套莫队。通过一个简单的 trick 似的 bitset 既能反映出每种数又能反映出每种数的个数，每个查询就用三个区间的 bitset 的按位并，取结果的 count 。&lt;/p&gt;
&lt;p&gt;然而 $ 10^5 $ 个 $ 10^5 $ 的 bitset 会 MLE 。我们把莫队分成三次，只需要三分之一的空间，可以卡进。&lt;/p&gt;
&lt;p&gt;看起来这样 $ O(n ^ 2) $ 的复杂度过不了 $ n = 10^5 $ ，但是由于使用了 bitset 的关系，常数实际上只有 1 / 32 ，实际跑的飞快。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="bitset" scheme="https://memset0.cn/tags/bitset/"/>
    
      <category term="莫队" scheme="https://memset0.cn/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>多项式系列板子</title>
    <link href="https://memset0.cn/algorithm/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    <id>https://memset0.cn/algorithm/多项式/</id>
    <published>2018-12-02T03:47:49.000Z</published>
    <updated>2018-12-04T00:39:07.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>快速傅里叶变换 FFT</li><li>数论傅里叶变换 NTT</li><li>任意模数 NTT</li><li>多项式求逆</li><li>未完待续……</li></ul><a id="more"></a><h1 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换 FFT"></a>快速傅里叶变换 FFT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc putchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; ++i)</span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; rg <span class="keyword">char</span> c = getc(); rg <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getc();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getc();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    putc(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n, k, n1, n2, rev[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="function">il <span class="title">complex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;a = <span class="number">0</span>, <span class="keyword">const</span> <span class="keyword">double</span> &amp;b = <span class="number">0</span>)</span> </span>&#123; x = a, y = b; &#125;</span><br><span class="line">    il <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">complex</span>(x + b.x, y + b.y); &#125;</span><br><span class="line">    il <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">complex</span>(x - b.x, y - b.y); &#125;</span><br><span class="line">    il <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">complex</span>(x * b.x - y * b.y, x * b.y + y * b.x); &#125;</span><br><span class="line">&#125; a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">complex</span> *a, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        complex wn(cos(pi / len), flag * sin(pi / len));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (len &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++, w = w * wn) &#123;</span><br><span class="line">                <span class="keyword">complex</span> x = a[i + j], y = w * a[i + j + len];</span><br><span class="line">                a[i + j] = x + y, a[i + j + len] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n1), read(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1; i++) read(a[i].x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n2; i++) read(b[i].x);</span><br><span class="line">    n = <span class="number">1</span>; <span class="keyword">while</span> (n &lt;= (n1 + n2)) n &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">    fft(a, <span class="number">1</span>), fft(b, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] * b[i];</span><br><span class="line">    fft(a, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1 + n2; i++) print((<span class="keyword">int</span>)(a[i].x / n + <span class="number">0.5</span>)), putc(i == n1 + n2 ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h1 id="数论傅里叶变换-NTT"><a href="#数论傅里叶变换-NTT" class="headerlink" title="数论傅里叶变换 NTT"></a>数论傅里叶变换 NTT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc putchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; ++i)</span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; rg <span class="keyword">char</span> c = getc(); rg <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getc();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getc();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    putc(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">10</span>, P = <span class="number">998244353</span>, G = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, n1, n2, tmp, rev[maxn];</span><br><span class="line">ll a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1l</span>l * (P - P / x) * inv(P % x) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(ll x, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    ll s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) (s *= x) %= P;</span><br><span class="line">        (x *= x) %= P, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ll *a, <span class="keyword">int</span> G)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        ll wn = <span class="built_in">pow</span>(G, (P - <span class="number">1</span>) / (len &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (len &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++, w = w * wn % P) &#123;</span><br><span class="line">                ll x = a[i + j], y = w * a[i + j + len] % P;</span><br><span class="line">                a[i + j] = (x + y) % P, a[i + j + len] = (x - y + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n1), read(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1; i++) read(a[i]), a[i] %= P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n2; i++) read(b[i]), b[i] %= P;</span><br><span class="line">    n = <span class="number">1</span>; <span class="keyword">while</span> (n &lt;= (n1 + n2)) n &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">    ntt(a, G), ntt(b, G);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] * b[i] % P;</span><br><span class="line">    ntt(a, inv(G)), tmp = inv(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1 + n2; i++) print(a[i] * tmp % P), putc(i == n1 + n2 ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h1 id="任意模数-NTT"><a href="#任意模数-NTT" class="headerlink" title="任意模数 NTT"></a>任意模数 NTT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">char</span> <span class="title">c</span>) &#123;</span></span><br><span class="line">    print(x), <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, G = <span class="number">3</span>, P[<span class="number">3</span>] = &#123;<span class="number">469762049</span>, <span class="number">998244353</span>, <span class="number">1004535809</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n1, n2, k, n, p, p1, p2, M2;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], f[<span class="number">3</span>][N], g[N], rev[N], ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= p) <span class="keyword">return</span> inv(x % p, p);</span><br><span class="line">    <span class="keyword">return</span> !x || x == <span class="number">1</span> ? <span class="number">1</span> : (ll)(p - p / x) * inv(p % x, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = (ll)s * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>, a = (ll)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> g, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = <span class="built_in">pow</span>(g, (p - <span class="number">1</span>) / (len &lt;&lt; <span class="number">1</span>), p);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (len &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++, w = (ll)w * wn % p) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = (ll)w * a[i + j + len] % p;</span><br><span class="line">                a[i + j] = (x + y) % p, a[i + j + len] = (x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> A2)</span> </span>&#123;</span><br><span class="line">    ll M1 = (ll)p1 * p2;</span><br><span class="line">    ll A1 = ((ll)inv(p2, p1) * a1 % p1 * p2 + (ll)inv(p1, p2) * a2 % p2 * p1) % M1;</span><br><span class="line">    ll K = ((A2 - A1) % M2 + M2) % M2 * inv(M1 % M2, M2) % M2;</span><br><span class="line">    <span class="keyword">int</span> ans = (A1 + M1 % p * K) % p;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n1), read(n2), read(p);</span><br><span class="line">    p1 = P[<span class="number">0</span>], p2 = P[<span class="number">1</span>], M2 = P[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1; i++) read(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n2; i++) read(b[i]);</span><br><span class="line">    n = <span class="number">1</span>; <span class="keyword">while</span> (n &lt;= (n1 + n2)) n &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[k][i] = a[i] % P[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) g[i] = b[i] % P[k];</span><br><span class="line">        ntt(f[k], G, P[k]), ntt(g, G, P[k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[k][i] = (ll)f[k][i] * g[i] % P[k];</span><br><span class="line">        ntt(f[k], inv(G, P[k]), P[k]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[k][i] = (ll)f[k][i] * inv(n, P[k]) % P[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1 + n2; i++) ans[i] = merge(f[<span class="number">0</span>][i], f[<span class="number">1</span>][i], f[<span class="number">2</span>][i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n1 + n2; i++) print(ans[i], <span class="string">" \n"</span>[i == n1 + n2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h1 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="comment">//   author: memset0</span></span><br><span class="line"><span class="comment">//   date: 2018.12.03 12:19:03</span></span><br><span class="line"><span class="comment">//   website: https://memset0.cn/</span></span><br><span class="line"><span class="comment">// =================================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> c = getchar(); <span class="keyword">register</span> <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getchar();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">char</span> <span class="title">c</span>) &#123;</span></span><br><span class="line">    print(x), <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>, p = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, i, lim, lim_inv;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], f[N], g[N], rev[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) s = (ll)s * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>, a = (ll)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) <span class="keyword">if</span> (i &lt; rev[i]) <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; lim; len &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = fpow(g, (p - <span class="number">1</span>) / (len &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i += (len &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++, w = (ll)w * wn % p) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = (ll)w * a[i + j + len] % p;</span><br><span class="line">                a[i + j] = (x + y) % p, a[i + j + len] = (x - y + p) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123; b[<span class="number">0</span>] = fpow(a[<span class="number">0</span>], p - <span class="number">2</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    solve(a, b, n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f)), <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="keyword">sizeof</span>(g));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[i] = a[i], g[i] = b[i];</span><br><span class="line">    lim = <span class="number">1</span>, k = <span class="number">0</span>; <span class="keyword">while</span> (lim != (n &lt;&lt; <span class="number">1</span>)) lim &lt;&lt;= <span class="number">1</span>, ++k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (k - <span class="number">1</span>));</span><br><span class="line">    ntt(f, <span class="number">3</span>), ntt(g, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i++) f[i] = (ll)f[i] * g[i] % p * g[i] % p;</span><br><span class="line">    ntt(f, fpow(<span class="number">3</span>, p - <span class="number">2</span>)), lim_inv = fpow(lim, p - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) b[i] = (<span class="number">2l</span>l * b[i] - (ll)f[i] * lim_inv % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (read(n), i = <span class="number">0</span>; i &lt; n; i++) read(a[i]);</span><br><span class="line">    lim = <span class="number">1</span>; <span class="keyword">while</span> (lim &lt; n) lim &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    solve(a, b, lim);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) print(b[i], <span class="string">" \n"</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;快速傅里叶变换 FFT&lt;/li&gt;
&lt;li&gt;数论傅里叶变换 NTT&lt;/li&gt;
&lt;li&gt;任意模数 NTT&lt;/li&gt;
&lt;li&gt;多项式求逆&lt;/li&gt;
&lt;li&gt;未完待续……&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="https://memset0.cn/categories/Algorithm/"/>
    
    
      <category term="FFT" scheme="https://memset0.cn/tags/FFT/"/>
    
      <category term="NTT" scheme="https://memset0.cn/tags/NTT/"/>
    
      <category term="CRT" scheme="https://memset0.cn/tags/CRT/"/>
    
  </entry>
  
  <entry>
    <title>洛谷5046 - [YNOI2019] Yuno loves sqrt technology I</title>
    <link href="https://memset0.cn/solution/luogu/5046/"/>
    <id>https://memset0.cn/solution/luogu/5046/</id>
    <published>2018-11-24T04:33:01.000Z</published>
    <updated>2018-12-09T02:14:19.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一道卡常题。考虑分块。</p><p>如果查询的 $l$ 和 $r$ 不在同一个块内。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询区间 =&gt;                ┌-----------------------------┐</span><br><span class="line">分好的块 =&gt; [.........][........][........][........][........][........]</span><br></pre></td></tr></table></figure><p>把查询的区间分成三个部分、A（块前零散部分）、B（整块的）、C（块后零散部分）</p><p>先考虑每个部分自身与自身匹配对答案的贡献。我们可以预处理出从每个点出发，到所属块的开始 / 结尾的逆序对个数，分别用 <code>lft[]</code> 和 <code>rit[]</code> 表示，预处理时间复杂度 $O(\sqrt n \times \sqrt n \times \log n)$。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌-----1.-----┐               1. 这一部分的逆序对个数表示为 lft[i]</span><br><span class="line">             ┌-----2.----┐   2. 这一部分的逆序对个数表示为 rit[i]</span><br><span class="line">[............i...........]</span><br></pre></td></tr></table></figure><p>接下来我们考虑 A -&gt; B ， C -&gt; B 的贡献，类似于蒲公英这题，处理出 <code>cnt[i][j]</code> 数组表示前 $i$ 个块内小于等于 $j$  的数字个数，查询时枚举 A 和 C 中的每一个数，利用这个前缀和查询对答案的贡献。这个部分也可以不在查询的时候做，而是预处理出结果，做二维前缀和，直接查询。</p><p>接下来考虑 A -&gt; C 的贡献，由于 A 和 C 是不重合的两个部分，可以采用类似归并排序的方法，把两个序列合并的同时计算出逆序对个数。</p><p>如果查询的 $l$ 和 $r$ 在同一个块内。</p><p>首先我们考虑，相邻的两个区间 A 和 B 。A 和 B 总共的逆序对个数，等于 A 内部的逆序对个数 + B 内部的逆序对个数 + A 对 B 贡献的逆序对个数。</p><p>好，那么我们再来考虑 $l$ 和 $r$ 在同一个块内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">┌------A+B-------┐      这一部分即之前已经处理出的 lft[r]</span><br><span class="line">┌----A----┐             这一部分即之前已经处理出的 lft[l]</span><br><span class="line">          ┌--B---┐</span><br><span class="line">[.........l......r.......]</span><br></pre></td></tr></table></figure><p>现在我们要求 B 的逆序对个数，只需要把 A + B 的逆序对个数减掉 A 内部的逆序对个数，再减掉 A 对 B 的逆序对个数即可。</p><p>剩下你只需要时间来卡常。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC target(<span class="meta-string">"avx"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc getchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc putchar</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (int i = l; i &lt;= r; ++i)</span></span><br><span class="line"><span class="keyword">namespace</span> ringo &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">x</span>) &#123;</span></span><br><span class="line">    x = <span class="number">0</span>; rg <span class="keyword">char</span> c = getc(); rg <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) f ^= c == <span class="string">'-'</span>, c = getc();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) x = x * <span class="number">10</span> + c - <span class="string">'0'</span>, c = getc();</span><br><span class="line">    <span class="keyword">if</span> (f) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt; <span class="title">il</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) print(x / <span class="number">10</span>);</span><br><span class="line">    putc(<span class="string">'0'</span> + x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, sqn = <span class="number">320</span>, M = sqn + <span class="number">5</span>, P = N / sqn + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, l, r, l1, l2, r1, r2, siz;</span><br><span class="line"><span class="keyword">int</span> a[N], rnk[N], srt[N], bln[N], lft[N], rit[N], s[M], q1[M], q2[M], fst[P], cnt[P][N];</span><br><span class="line">ll ans, fur[P], sum[P][P], pre[P][N];</span><br><span class="line"><span class="keyword">bool</span> tag[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">for</span> (; k &lt;= siz; k += k &amp; -k) ++s[k]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">for</span> (; k; k -= k &amp; -k) x += s[k]; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> pre[b][d] - pre[b][c - <span class="number">1</span>] - pre[a - <span class="number">1</span>][d] + pre[a - <span class="number">1</span>][c - <span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> ll1, <span class="keyword">int</span> rr1, <span class="keyword">int</span> ll2, <span class="keyword">int</span> rr2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l1 = <span class="number">1</span>, l2 = <span class="number">1</span>, r1 = <span class="number">0</span>, r2 = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tag, <span class="number">0</span>, <span class="keyword">sizeof</span>(tag));</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = ll1; i &lt;= rr1; i++) tag[rnk[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fst[bln[l] + <span class="number">1</span>] - fst[bln[l]]; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tag[i]) q1[++r1] = srt[fst[bln[l]] + i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(tag, <span class="number">0</span>, <span class="keyword">sizeof</span>(tag));</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = ll2; i &lt;= rr2; i++) tag[rnk[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= fst[bln[r] + <span class="number">1</span>] - fst[bln[r]]; ++i)</span><br><span class="line">        <span class="keyword">if</span> (tag[i]) q2[++r2] = srt[fst[bln[r]] + i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (l1 &lt;= r1 &amp;&amp; l2 &lt;= r2)</span><br><span class="line">        <span class="keyword">if</span> (q1[l1] &lt; q2[l2]) ++l1;</span><br><span class="line">        <span class="keyword">else</span> ++l2, ans += r1 - l1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) read(a[i]), srt[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) bln[i] = (i - <span class="number">1</span>) / sqn + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bln[n]; ++i) fst[i] = sqn * (i - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    fst[bln[n] + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ++cnt[bln[i]][a[i]];</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bln[n]; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        cnt[i][j] += cnt[i - <span class="number">1</span>][j] + cnt[i][j - <span class="number">1</span>] - cnt[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bln[n]; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        pre[i][j] = pre[i][j - <span class="number">1</span>] + cnt[i][a[j] - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= bln[n]; r++) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= r; l++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = fst[r]; j &lt; fst[r + <span class="number">1</span>]; j++)</span><br><span class="line">            sum[l][r] += fst[r] - fst[l] - cnt[r - <span class="number">1</span>][a[j] - <span class="number">1</span>] + cnt[l - <span class="number">1</span>][a[j] - <span class="number">1</span>];</span><br><span class="line">        sum[l][r] += sum[l][r - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bln[n]; ++i) &#123;</span><br><span class="line">        siz = fst[i + <span class="number">1</span>] - fst[i], <span class="built_in">std</span>::sort(srt + fst[i], srt + fst[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = fst[i]; j &lt; fst[i + <span class="number">1</span>]; j++) rnk[j] = <span class="built_in">std</span>::lower_bound(srt + fst[i], srt + fst[i + <span class="number">1</span>], a[j]) - srt - fst[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = fst[i]; j &lt; fst[i + <span class="number">1</span>]; j++) lft[j] = (j == fst[i] ? <span class="number">0</span> : lft[j - <span class="number">1</span>]) + j - fst[i] - query(rnk[j]), modify(rnk[j]);</span><br><span class="line">        <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = fst[i + <span class="number">1</span>] - <span class="number">1</span>; j &gt;= fst[i]; j--) rit[j] = (j == fst[i + <span class="number">1</span>] - <span class="number">1</span> ? <span class="number">0</span> : rit[j + <span class="number">1</span>]) + query(rnk[j]), modify(rnk[j]);</span><br><span class="line">        fur[i] = fur[i - <span class="number">1</span>] + rit[fst[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">1</span>, bl, br; i &lt;= m; ++i) &#123;</span><br><span class="line">        read(l), read(r);</span><br><span class="line">        l ^= ans, r ^= ans;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r) <span class="built_in">std</span>::swap(l, r);</span><br><span class="line">        <span class="keyword">if</span> (bln[l] == bln[r]) &#123;</span><br><span class="line">            ans = lft[r] - (l == fst[bln[l]] ? <span class="number">0</span> : lft[l - <span class="number">1</span>]);</span><br><span class="line">            ans -= merge(fst[bln[l]], l - <span class="number">1</span>, l, r);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bl = bln[l] + <span class="number">1</span>, br = bln[r] - <span class="number">1</span>;</span><br><span class="line">            ans = rit[l] + lft[r] + sum[bl][br] - sum[bl][bl - <span class="number">1</span>] + fur[br] - fur[bl - <span class="number">1</span>];</span><br><span class="line">            ans += get(bl, br, l, fst[bl] - <span class="number">1</span>);</span><br><span class="line">            ans -= get(bl, br, fst[br + <span class="number">1</span>], r);</span><br><span class="line">            ans += (r - fst[br + <span class="number">1</span>] + <span class="number">1</span>) * (fst[br + <span class="number">1</span>] - fst[bl]);</span><br><span class="line">            ans += merge(l, fst[bl] - <span class="number">1</span>, fst[br + <span class="number">1</span>], r);</span><br><span class="line">        &#125;</span><br><span class="line">        print(ans), putc(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; clock() / (<span class="keyword">double</span>)CLOCKS_PER_SEC &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ringo::main(), <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>（最近比较喜欢压行）</p><p>感谢您的阅读。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道卡常题。考虑分块。&lt;/p&gt;
&lt;p&gt;如果查询的 $l$ 和 $r$ 不在同一个块内。 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查询区间 =&amp;gt;                ┌-----------------------------┐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分好的块 =&amp;gt; [.........][........][........][........][........][........]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把查询的区间分成三个部分、A（块前零散部分）、B（整块的）、C（块后零散部分）&lt;/p&gt;
&lt;p&gt;先考虑每个部分自身与自身匹配对答案的贡献。我们可以预处理出从每个点出发，到所属块的开始 / 结尾的逆序对个数，分别用 &lt;code&gt;lft[]&lt;/code&gt; 和 &lt;code&gt;rit[]&lt;/code&gt; 表示，预处理时间复杂度 $O(\sqrt n \times \sqrt n \times \log n)$。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┌-----1.-----┐               1. 这一部分的逆序对个数表示为 lft[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             ┌-----2.----┐   2. 这一部分的逆序对个数表示为 rit[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[............i...........]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们考虑 A -&amp;gt; B ， C -&amp;gt; B 的贡献，类似于蒲公英这题，处理出 &lt;code&gt;cnt[i][j]&lt;/code&gt; 数组表示前 $i$ 个块内小于等于 $j$  的数字个数，查询时枚举 A 和 C 中的每一个数，利用这个前缀和查询对答案的贡献。这个部分也可以不在查询的时候做，而是预处理出结果，做二维前缀和，直接查询。&lt;/p&gt;
&lt;p&gt;接下来考虑 A -&amp;gt; C 的贡献，由于 A 和 C 是不重合的两个部分，可以采用类似归并排序的方法，把两个序列合并的同时计算出逆序对个数。&lt;/p&gt;
&lt;p&gt;如果查询的 $l$ 和 $r$ 在同一个块内。&lt;/p&gt;
&lt;p&gt;首先我们考虑，相邻的两个区间 A 和 B 。A 和 B 总共的逆序对个数，等于 A 内部的逆序对个数 + B 内部的逆序对个数 + A 对 B 贡献的逆序对个数。&lt;/p&gt;
&lt;p&gt;好，那么我们再来考虑 $l$ 和 $r$ 在同一个块内：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;┌------A+B-------┐      这一部分即之前已经处理出的 lft[r]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;┌----A----┐             这一部分即之前已经处理出的 lft[l]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ┌--B---┐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[.........l......r.......]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们要求 B 的逆序对个数，只需要把 A + B 的逆序对个数减掉 A 内部的逆序对个数，再减掉 A 对 B 的逆序对个数即可。&lt;/p&gt;
&lt;p&gt;剩下你只需要时间来卡常。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="树状数组" scheme="https://memset0.cn/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="分块" scheme="https://memset0.cn/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>退役后的做题计划（一）</title>
    <link href="https://memset0.cn/plan/plan1/"/>
    <id>https://memset0.cn/plan/plan1/</id>
    <published>2018-11-12T12:00:02.000Z</published>
    <updated>2018-11-16T12:56:07.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本计划根据 <a href="//oi.men.ci">Menci 博客</a> 题解时间顺序排列。<br>CodeVS 和 COGS 的部分题出于某些原因不打算做（主要是没有账号）。<br>部分未完成且正准备做的题目可能会给出链接（优先级：洛谷 &gt; BZOJ &gt; LOJ &gt; UOJ）。</p><a id="more"></a><table><thead><tr><th style="text-align:right">完成情况</th><th style="text-align:left">题目名称</th></tr></thead><tbody><tr><td style="text-align:right">√</td><td style="text-align:left">「NOI2002」银河英雄传说 - 并查集</td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 3269」混合背包 - 背包 DP</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「HNOI2004」宠物收养所 - set</td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 3168 / 31」抄书问题 - 划分 DP / 二分答案</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P2014" target="_blank" rel="noopener">「CTSC1997」选课 - 树形 DP</a></td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「NOIP2000」乘积最大 - 划分 DP</td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 2598」编辑距离问题 - 线性 DP</td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「Tyvj 3317」火车票 - 划分 DP</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「NOIP2006」能量项链 - 区间 DP</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「NOIP2003」数字游戏 - 划分 DP</td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 1345」饥饿的奶牛 - 线性 DP</td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 3269」混合背包 - 背包 DP + 单调队列</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「BZOJ 2442」修剪草坪 - 线性 DP + 单调队列</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「NOIP2006」金明的预算方案 - 背包 DP + 树形 DP</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「BZOJ 1251」序列终结者 - Splay</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「NOIP2012」同余方程 - 扩展欧几里得</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「NOI2015」程序自动分析 - 离散化 + 并查集</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「NOI2015」软件包管理器 - 树链剖分</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「BZOJ 1477」青蛙的约会 - 扩展欧几里得</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「NOI2004」郁闷的出纳员 - Splay</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P4513" target="_blank" rel="noopener">「BZOJ 1756」小白逛公园 - 线段树</a> </td></tr><tr><td style="text-align:right">-</td><td style="text-align:left">「CodeVS 1563」奶牛的交通 - 网络流</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「BZOJ 2683」简单题 - CDQ</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 14」搭配飞行员 - 二分图匹配</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 728」最小路径覆盖问题 - 二分图匹配</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 396」魔术球问题 - 贪心</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 729」圆桌聚餐 - 网络流</td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「COGS 731」最长递增子序列 - 线性 DP + 网络流</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 727」太空飞行计划 - 最大权闭合图</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 439」软件补丁 - 记忆化搜索 + 位运算</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「COGS 734」方格取数 - 二分图最大独立集</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P4013" target="_blank" rel="noopener">「COGS 738」数字梯形 - 费用流</a> </td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 746」骑士共存 - 二分图最大独立集</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「NOIP2010」关押罪犯 - 二分图染色</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「JSOI2008」最大数 - Splay</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 739」运输问题 - 费用流</td></tr><tr><td style="text-align:right">√</td><td style="text-align:left">「COGS 742」深海机器人 - 费用流</td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><strong><a href="https://www.luogu.org/problemnew/show/P2754" target="_blank" rel="noopener">「CTSC1999」星际转移 - 网络流</a></strong> </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「COGS 740」分配问题 - 二分图最大权匹配</td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「COGS 741」负载平衡 - 费用流 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「SDOI2015」星际战争 - 网络流 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P2469" target="_blank" rel="noopener">「SDOI2010」星际竞速 - 费用流</a> </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「CodeVS 2822」爱在心中 - 强连通分量 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「HAOI2006」受欢迎的牛 - 强连通分量 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「SCOI2011」糖果 - 强连通分量 + 拓扑排序 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><strong><a href="https://www.luogu.org/problemnew/show/P4008" target="_blank" rel="noopener">「NOI2003」文本编辑器 - Splay</a></strong> </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P1640" target="_blank" rel="noopener"><strong>「SCOI2010」游戏 - 二分图匹配</strong></a> </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「AHOI2008」紧急集合 - 最近公共祖先 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「SCOI2007」修车 - 费用流 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><strong>「NOI2006」最大获利 - 最大权闭合图</strong> </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「APIO2009」抢掠计划 - 强连通分量 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「POJ 2728」Desert King - 01 分数规划 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11806」Cheerleaders - 组合数 + 容斥原理 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11538」Chess Queen - 计数原理 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11375」Matches - 递推 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11137」Ingenuous Cubrency - 递推 / 背包 DP </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11174」Stand in a Line - 计数原理 + 乘法逆元 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「POJ 1737」Connected Graph - 组合数 + 计数原理 + 递推 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 1362」Exploring Pyramids - 区间 DP + 计数原理 </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 11361」Investigating Div-Sum Property - 数位 DP </td></tr><tr><td style="text-align:right"> -</td><td style="text-align:left">「UVa 10253」Series-Parallel Networks - 整数划分 + 组合数 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「SDOI2008」洞穴勘测 - Link-Cut Tree </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><strong>「省选模拟赛」小奇的集合 - 矩阵乘法</strong> </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「省选模拟赛」小奇的糖果 - 扫描线 + 链表 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「省选模拟赛」染色 - 树链剖分 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「SCOI2015」小凸玩矩阵 - 二分图匹配 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><a href="https://www.luogu.org/problemnew/show/P4216" target="_blank" rel="noopener"><strong>「SCOI2015」情报传递 - 离线 + Link-Cut Tree</strong></a> </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「SCOI2015」国旗计划 - 贪心 + 倍增 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「BZOJ 2143」飞飞侠 - 最短路 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「SCOI2015」小凸玩密室 - 树形 DP </td></tr><tr><td style="text-align:right"></td><td style="text-align:left"><strong>「SCOI2015」小凸解密码 - set</strong> </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「省选模拟赛」扔鸡蛋 - DP </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「BZOJ 2038」小Z的袜子 - 莫队 </td></tr><tr><td style="text-align:right"></td><td style="text-align:left">「BZOJ 2296」随机种子 - 数论基础 </td></tr><tr><td style="text-align:right"> √</td><td style="text-align:left">「HAOI2015」树上操作 - 树链剖分 + DFS序 </td></tr></tbody></table><p>截止到第 27 页</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本计划根据 &lt;a href=&quot;//oi.men.ci&quot;&gt;Menci 博客&lt;/a&gt; 题解时间顺序排列。&lt;br&gt;CodeVS 和 COGS 的部分题出于某些原因不打算做（主要是没有账号）。&lt;br&gt;部分未完成且正准备做的题目可能会给出链接（优先级：洛谷 &amp;gt; BZOJ &amp;gt; LOJ &amp;gt; UOJ）。&lt;/p&gt;
    
    </summary>
    
      <category term="Plan" scheme="https://memset0.cn/categories/Plan/"/>
    
    
  </entry>
  
  <entry>
    <title>BZOJ5017 - [SNOI2017] 炸弹</title>
    <link href="https://memset0.cn/solution/bzoj/5017/"/>
    <id>https://memset0.cn/solution/bzoj/5017/</id>
    <published>2018-11-12T11:33:40.000Z</published>
    <updated>2018-12-09T02:15:16.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>zhouyuheng2003 学长一天打完 CF 后给我做的一道他说是简单题的题，然而炒鸡难！！！</p><p>考虑暴力，每个炸弹向能引爆炸弹的连边，总数是 $n^2$ 级别的。之后跑 tarjan 缩点，并在 DAG 上统计答案。统计是，考虑合并来的点所对应的情况可能会有重点，因此需要开桶去重。这样的时空复杂度都是 $O(n^2)$ 的。</p><p>考虑优化，通过观察可以发现，能引爆的炸弹一定是连续的一整段区间。可以用线段树优化建边，统计答案时不需要开桶统计，而是统计能够炸掉的最左端的点和最右端的点。时间复杂度 $O(n \log n)$ ，空间复杂度 $O(n \log n)$。</p><p>同时</p><p>当然这并不是最优的，zhouyuheng2003 学长的博客中给出了一种时空复杂度均为 $O(n)$ 的做法。见 <a href="https://blog.csdn.net/zhouyuheng2003/article/details/83278984" target="_blank" rel="noopener">https://blog.csdn.net/zhouyuheng2003/article/details/83278984</a> 。</p><a id="more"></a><p>代码莫名 RE 调了好久，因此码风有点丑不要介意。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (x = getc(), !<span class="built_in">islower</span>(x) &amp;&amp; !<span class="built_in">isupper</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line"><span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line"><span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, u, v, w, x, l, r, tn, ans, cnt, pos;</span><br><span class="line">ll b[maxn * <span class="number">3</span>]; <span class="keyword">int</span> q[maxn];</span><br><span class="line"><span class="keyword">int</span> col[maxn], ind[maxn], ls[maxn], rs[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top, dfn[maxn], low[maxn], stk[maxn], ins[maxn];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], to[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">ll x, l, r;</span><br><span class="line">&#125; a[maxn];</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span> &lt; edge &gt; e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">nxt[tot] = hed[u], to[tot] = v, hed[u] = tot++;</span><br><span class="line">e.push_back(edge&#123;u, v&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">nxt[tot] = hed[u], to[tot] = v, hed[u] = tot++;</span><br><span class="line">ind[v]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">dfn[u] = low[u] = ++pos;</span><br><span class="line">stk[++top] = u, ins[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u] = <span class="built_in">std</span>::min(low[u], low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ins[v]) &#123;</span><br><span class="line">low[u] = <span class="built_in">std</span>::min(low[u], dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">++cnt;</span><br><span class="line">ls[cnt] = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (top) &#123;</span><br><span class="line"><span class="keyword">int</span> v = stk[top--];</span><br><span class="line">col[v] = cnt;</span><br><span class="line">ins[v] = <span class="number">0</span>;</span><br><span class="line">ls[cnt] = <span class="built_in">std</span>::min(ls[cnt], (<span class="keyword">int</span>)a[v].l);</span><br><span class="line">rs[cnt] = <span class="built_in">std</span>::max(rs[cnt], (<span class="keyword">int</span>)a[v].r);</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">read(x), read(r);</span><br><span class="line">a[i].x = x, a[i].r = r;</span><br><span class="line">b[++tn] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + tn + <span class="number">1</span>);</span><br><span class="line">tn = <span class="built_in">std</span>::unique(b + <span class="number">1</span>, b + tn + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">a[i].l = <span class="built_in">std</span>::lower_bound(b + <span class="number">1</span>, b + tn + <span class="number">1</span>, a[i].x - a[i].r) - b;</span><br><span class="line">a[i].r = <span class="built_in">std</span>::upper_bound(b + <span class="number">1</span>, b + tn + <span class="number">1</span>, a[i].x + a[i].r) - b - <span class="number">1</span>;</span><br><span class="line">a[i].x = <span class="built_in">std</span>::lower_bound(b + <span class="number">1</span>, b + tn + <span class="number">1</span>, a[i].x) - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; a[stk[top]].r &lt; a[i].x) top--;</span><br><span class="line"><span class="keyword">if</span> (top &amp;&amp; a[stk[top]].r &gt;= a[i].x)</span><br><span class="line">add_edge1(stk[top], i);</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; a[stk[top]].r &lt;= a[i].r) top--;</span><br><span class="line">stk[++top] = i;</span><br><span class="line">&#125;</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; a[stk[top]].l &gt; a[i].x) top--;</span><br><span class="line"><span class="keyword">if</span> (top &amp;&amp; a[stk[top]].l &lt;= a[i].x)</span><br><span class="line">add_edge1(stk[top], i);</span><br><span class="line"><span class="keyword">while</span> (top &amp;&amp; a[stk[top]].l &gt;= a[i].l) top--;</span><br><span class="line">stk[++top] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!dfn[i])</span><br><span class="line">tarjan(i);</span><br><span class="line">tot = <span class="number">2</span>, <span class="built_in">memset</span>(hed, <span class="number">0</span>, <span class="keyword">sizeof</span>(hed));</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span> &lt; edge &gt; ::iterator it = e.begin(); it != e.end(); it++) &#123;</span><br><span class="line">u = it-&gt;v, v = it-&gt;u, u = col[u], v = col[v];</span><br><span class="line"><span class="keyword">if</span> (u ^ v) &#123;</span><br><span class="line">add_edge2(u, v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!ind[i]) &#123;</span><br><span class="line">q[++r] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">u = q[l++];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i]) &#123;</span><br><span class="line">ls[v] = <span class="built_in">std</span>::min(ls[u], ls[v]);</span><br><span class="line">rs[v] = <span class="built_in">std</span>::max(rs[u], rs[v]);</span><br><span class="line"><span class="keyword">if</span> (!--ind[v])</span><br><span class="line">q[++r] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">ans = (ans + <span class="number">1l</span>l * i * (rs[col[i]] - ls[col[i]] + <span class="number">1</span>)) % <span class="number">1000000007</span>;</span><br><span class="line">print(ans, <span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zhouyuheng2003 学长一天打完 CF 后给我做的一道他说是简单题的题，然而炒鸡难！！！&lt;/p&gt;
&lt;p&gt;考虑暴力，每个炸弹向能引爆炸弹的连边，总数是 $n^2$ 级别的。之后跑 tarjan 缩点，并在 DAG 上统计答案。统计是，考虑合并来的点所对应的情况可能会有重点，因此需要开桶去重。这样的时空复杂度都是 $O(n^2)$ 的。&lt;/p&gt;
&lt;p&gt;考虑优化，通过观察可以发现，能引爆的炸弹一定是连续的一整段区间。可以用线段树优化建边，统计答案时不需要开桶统计，而是统计能够炸掉的最左端的点和最右端的点。时间复杂度 $O(n \log n)$ ，空间复杂度 $O(n \log n)$。&lt;/p&gt;
&lt;p&gt;同时&lt;/p&gt;
&lt;p&gt;当然这并不是最优的，zhouyuheng2003 学长的博客中给出了一种时空复杂度均为 $O(n)$ 的做法。见 &lt;a href=&quot;https://blog.csdn.net/zhouyuheng2003/article/details/83278984&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zhouyuheng2003/article/details/83278984&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="tarjan" scheme="https://memset0.cn/tags/tarjan/"/>
    
      <category term="缩点" scheme="https://memset0.cn/tags/%E7%BC%A9%E7%82%B9/"/>
    
      <category term="线段树优化建边" scheme="https://memset0.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96%E5%BB%BA%E8%BE%B9/"/>
    
  </entry>
  
  <entry>
    <title>NOIP2018 爆零记</title>
    <link href="https://memset0.cn/diary/NOIP2018%E6%B8%B8%E8%AE%B0/"/>
    <id>https://memset0.cn/diary/NOIP2018游记/</id>
    <published>2018-11-10T12:51:19.000Z</published>
    <updated>2018-12-02T04:02:06.852Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h1><blockquote><p>注意这是 -1 天</p></blockquote><p>上午照常模拟赛，考 NOIP 信心赛。</p><p>虽然是信心赛，但是题目好难。T1 洛谷原题，黑题难度 QAQ 。后两题稍微简单一点，但是如果开始刚了 T1 估计就来不及了。</p><p>我先开了 T2 ，推出了容斥，期望 $O(t \log n)$ 的 70 分。然后去开 T3 ，写了个 $O(n \times m \log n)$ 加卡常，期望 80 。最后开 T1 ，一遍写对了一个动态开点线段树，特判特殊情况拿到 50 分部分分。</p><p>考试成绩出来，诶 T3 怎么 A 了 QAQ 。T2 没有输出 <code>STO yyb ORZ</code> （无解情况）少了 15 分， T1 还是预测得分 50 分。算是涨了不少信心吧。</p><p>下午继续写板子，任务列表也清的差不多了。还有一些很难的算法感觉也不会用到懒得写了。</p><p>晚上老师讲竞赛时间安排和一些注意事项，同是说明天是 “ Open Day ” ，我们可以光明正大的地颓废放松 233 . </p><p>讲完之后感觉压力突然加大，本来以为很遥远的 NOIP 真的近在眼前了。真的，真的，好紧张。找学长哭诉。 lyc 哥哥特别好，特别温暖，给了我许多安慰 qwq。</p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>上午开始机房集体颓废，打 <code>jokebird.com</code> 爆踩全服。之后开始打球球大作战。也有人 5 人组队 LOL （第一局被对面五杀，第二局吊打对面 233）</p><p>下午继续颓废，看了点数论。</p><p>在赛百味吃完饭的时候遇见了 zx2003 学长，他给我们讲了一些他的故事，也给了我很大的鼓励。</p><p>晚上颓了一会会儿，然后手推 EXGCD 和 EXCRT ，虽说感觉不会考，主要还是熟悉一下推式子的感觉 QAQ 。</p><p>接着去楼上机房蹭 RP ，好紧张，又哭了 QAQ 。但是学长的安慰真的很有用（不然可能窝晚上心态就蹦了）。</p><p>睡觉的时候还是有点紧张，半夜睡不着。</p><h1 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>但是早上起来精神状态还是很好的。一路赶去学军紫金港路也很顺畅。</p><p>早点到校门口集合领准考证，我们有同学的准考证在校园里还没领但是要有准考证才能进场 233 。还好老师送出来了。我们初中几个还拍了合影。</p><p>进考场前最后膜拜了一次大佬。坐我左边的是一个超好的（不认识的）高三学长。当时我特别紧张，他安慰了我也给了我鼓励，也让我平静了一下心态。</p><p>开题，解压密码 <code>Fei2Xue@Lian$Tian!</code> 。学军体育馆可真冷。</p><p>T1 上手一个 $O(n ^ 2)$ 贪心过了大样例，然后用 ST 表优化成 $O(n \log n)$ 开始拍。</p><p>T2 一开始以为是 exgcd ，但又感觉不可能那么难。看了眼 T3 没思路，滚回来手玩了一下样例想到了个背包。一发过了大样例感觉很稳。</p><p>T3 先写了部分分，和状压暴力对拍。差不多写满 55 分部分分，正解的思路也有了。此时我可以写二叉树的部分分到 80 ，也可以直接写正解。经过了一番焦灼，还是写了部分分，毕竟写正解也有可能调不出来。</p><p>考完和同学 yy T3 ，发现了一个思维漏洞，不过很容易拍出来，而且我也立马想到了补救措施。不过如果这是考场就不一定了。所以感觉当初自己稳一点写了部分分也是挺正确的。</p><p>估分 $280 = 100 + 100 + 80$ ，考完听说 Sooke 、mocania 、 LJC00118 、 Isonan 都 AK 了。唉，毕竟技不如人，甘拜下风。</p><p>下午继续颓废，帮学长安 Flash Player 但是失败了，同时跟同学继续嘴巴 T3 。</p><p>晚上颓废 + 写游记，也不是很紧张了。</p><p>明天加油：尽人事，听天命。</p><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>无论如何预感今天的题目会很难。跟同学开玩笑说今天写满暴力就好了，结果还真 tmd 暴力滚粗了。</p><p>解压密码和昨天连起来：“飞雪连天射白鹿，笑书神侠倚碧鸳。” CCF 的解压密码倒是一年比一年有创意了233。就是能不能不要出原题QAQ。</p><p>开 T1 ，一开始以为是一张图，没想到是一个树和基环树。等等，这一题当两题的画风，让我想到了栗栗的书架啊。先随手写了个树的情况，过了大样例，开始看 T2 。</p><p>T2 一眼以为是状压，一脸懵逼。还成功出现了“关于 T2 的题目解释请看 T1 的情况”（那放洛谷上怎么办 233）。本想枚举个数然后直接判断，结果第二个样例输出 <code>144</code> 瞬间懵逼。写了发状压枚举路径判断过了两个小样例。开始跑 $5 \times 5$ 的但始终过不去（为什么别人的状压可以跑 $7 \times 7$ QAQ）。发现了每次 $\times 3$ 的规律。</p><p>没办法，开 T3 ，44 分的 $O(n m)$ 暴力很好写，一遍过了大样例。开始想正解却没思路。目前已经有 $60 + 50 + 44 = 154$ 分了，还有两个小时多，先上个厕所冷静一下。</p><p>回来想继续优化 T2 ，但脑子里一直把枚举矩阵的 $O(2^{nm})$  复杂度搞成了 $O(2^{n+m})$ 。结果当然是就算苦苦优化还是过不去大样例，白白浪费了半个小时。</p><p>接下去去看 T1 $n = m$ 的情况，由于 $m = n - 1$ 的情况可以 $O(n)$ 完成，我把 $n = 5000$ 的数据范围当成了 $n = 100000$ 最后强行想出来了一个 $O(n)$ 解法但已经又过了半个小时。还有一个小时感觉写不完这个及其麻烦的做法，赶紧苟了个成环的部分分。</p><p>只能看 T3 部分分。一条链上的情况考场里一脸懵逼毫无思路，考完出来却豁然开朗（mmp）。其实把 dp 的转移变成一个个矩阵放到线段树上区间查询即可。然而考场上我脑子里一片空白，什么也想不到。</p><p>回去检查 T2 ， T2 的大样例好毒啊，不仅给的数据范围小，而且都是 $n = m$ 的，感觉有坑。检查了老半天暴力还有不到半个小时。发现 $n = 1$ 的情况不是每次乘以 $3$ 而是 $2$ 。赶快改过来（差点就没分了），捡回一条狗命。</p><p>最后时间照常检查文件，交卷。考完出来要了隔壁同学的 QQ 号，也算是一种缘分吧。</p><p>Sooke ， Isonan 照样稳的一比 ， $200+$ 。感觉考场 debuff 太严重了，真的脑子里一片空白。平时模拟赛可以拖一段时间交卷，大胆地去尝试正解，然而考试的时候不仅没拖延的可能，还要单独花时间检查文件等等，一下就丧失了去尝试正解的勇气。</p><p>最后期望得分 $189 = 80 + 65 + 44$</p><h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h1><p>出选手代码了，去洛谷上交了一发竟然 $ 474 = 100 + 100 + 80 + 80 + 70 + 44 $ ，激动的要死。</p><p>当然也有同学 D2T1 的 $O(n log n)$ 做法挂了，但还是比我高。</p><h1 id="Day"><a href="#Day" class="headerlink" title="Day ?"></a>Day ?</h1><p>CCF 官方成绩出了，只有 $ 454 = 100 + 100 + 65 + 80 + 65 + 44 $ ，原来 D1T3 的分支不超过三按照我的那种方法有可能在根节点三叉。</p><p>看来 WC 无望了，只能希望可以上 PKUWC 的初中线吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Diary" scheme="https://memset0.cn/categories/Diary/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 下 Sublime Text 3 配置运行 G++</title>
    <link href="https://memset0.cn/geek/sublime-run-g++-with-mac/"/>
    <id>https://memset0.cn/geek/sublime-run-g++-with-mac/</id>
    <published>2018-11-07T08:19:00.000Z</published>
    <updated>2018-11-07T08:25:48.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置编译系统"><a href="#配置编译系统" class="headerlink" title="配置编译系统"></a>配置编译系统</h1><p>新建编译系统并粘贴入以下命令，保存为 <code>G++.sublime-build</code> 或其他你喜欢的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;shell_cmd&quot;: &quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; -Wall&quot;,</span><br><span class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</span><br><span class="line">    &quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;,</span><br><span class="line">    &quot;selector&quot;: &quot;source.c, source.c++&quot;,</span><br><span class="line">    &quot;variants&quot;:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;compile&quot;,</span><br><span class="line">            &quot;shell_cmd&quot;: &quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;/tmp/$&#123;file_base_name&#125;\&quot; -Wall -O2 &amp;&amp; echo &apos;Compile finished.&apos;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;run&quot;,</span><br><span class="line">            &quot;shell_cmd&quot;: &quot;&apos;/tmp/$&#123;file_base_name&#125;&apos; &amp;&amp; echo &apos;=============\nRun finished.&apos;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;compile &amp; run&quot;,</span><br><span class="line">            &quot;shell_cmd&quot;: &quot;g++ \&quot;$&#123;file&#125;\&quot; -o \&quot;/tmp/$&#123;file_base_name&#125;\&quot; -Wall -O2 &amp;&amp; /tmp/$&#123;file_base_name&#125; &amp;&amp; echo &apos;=============\nComplie &amp; run finished.&apos;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置编译运行快捷键"><a href="#配置编译运行快捷键" class="headerlink" title="配置编译运行快捷键"></a>配置编译运行快捷键</h1><p>把以下代码粘贴到你的快捷键配置文件中，表示 <code>F9</code> 编译， <code>F10</code> 运行， <code>F11</code> 编译并运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;keys&quot;: [&quot;f9&quot;], &quot;command&quot;: &quot;build&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">&quot;variant&quot;: &quot;compile&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;keys&quot;: [&quot;f10&quot;], &quot;command&quot;: &quot;build&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">&quot;variant&quot;: &quot;run&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;keys&quot;: [&quot;f11&quot;], &quot;command&quot;: &quot;build&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">&quot;variant&quot;: &quot;compile &amp; run&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><p>Mac OS 下默认用 Clang 编译 G++ 代码。因此不支持使用万能头文件（<code>bits/stdc++.h</code>），解决方案：</p><ol><li><p>手动复制 <code>bits/stdc++.h</code> 文件到对应目录中</p></li><li><p>手动安装 <code>g++4.9</code> 并把上面编译命令中的 <code>g++</code> 替换为 <code>g++-4.9</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Geek" scheme="https://memset0.cn/categories/Geek/"/>
    
    
  </entry>
  
  <entry>
    <title>洛谷4949 - 最短距离</title>
    <link href="https://memset0.cn/solution/luogu/4949/"/>
    <id>https://memset0.cn/solution/luogu/4949/</id>
    <published>2018-10-26T08:00:00.000Z</published>
    <updated>2018-12-09T02:19:14.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题大概是一个基环树上带修改边权的最短距离。可以把他看做一棵树，把多的那条边拎出来，树剖维护距离，分类讨论即可。大概是你谷蓝题难度吧。</p><p>由于树剖只需要查询 dfs 序上区间最小值，可以考虑树状数组维护常熟较小。目前不卡常的情况下你谷效率 rk1 。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (x = getc(), !<span class="built_in">islower</span>(x) &amp;&amp; !<span class="built_in">isupper</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line"><span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line"><span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, y, u, v, w, tu, tv, tw, opt, ans, pos;</span><br><span class="line"><span class="keyword">int</span> a[maxn], s[maxn], cst[maxn], tmp[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn], id[maxn], top[maxn], son[maxn], wid[maxn], dep[maxn], siz[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], to[maxn &lt;&lt; <span class="number">1</span>], val[maxn &lt;&lt; <span class="number">1</span>], nxt[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125; e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis[u] = siz[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line"><span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">fa[v] = u, dep[v] = dep[u] + <span class="number">1</span>, cst[v] = val[i];</span><br><span class="line">dfs1(v);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line"><span class="keyword">if</span> (siz[v] &gt; siz[son[u]])</span><br><span class="line">son[u] = v;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">tu = u, tv = v, tw = val[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> toppoint)</span> </span>&#123;</span><br><span class="line">top[u] = toppoint, id[u] = ++pos, wid[id[u]] = u;</span><br><span class="line"><span class="keyword">if</span> (siz[u] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">dfs2(son[u], toppoint);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line"><span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u] &amp;&amp; !(u == tu &amp;&amp; v == tv) &amp;&amp; !(u == tv &amp;&amp; v == tu))</span><br><span class="line">dfs2(v, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]])</span><br><span class="line"><span class="built_in">std</span>::swap(u, v);</span><br><span class="line">v = fa[top[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &gt; dep[v])</span><br><span class="line"><span class="built_in">std</span>::swap(u, v);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i += i &amp; -i)</span><br><span class="line">s[i] += w - tmp[k];</span><br><span class="line">tmp[k] = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r; i; i -= i &amp; -i)</span><br><span class="line">ret += s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l - <span class="number">1</span>; i; i -= i &amp; -i)</span><br><span class="line">ret -= s[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_path_to_root</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">ret += query(id[top[u]], id[u]);</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u != v)</span><br><span class="line">ret += query(id[son[v]], id[u]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_path</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>, t = lca(u, v);</span><br><span class="line">ret += query_path_to_root(u, t);</span><br><span class="line">ret += query_path_to_root(v, t);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">read(u), read(v), read(w);</span><br><span class="line">e[i] = edge&#123;u, v, w&#125;;</span><br><span class="line">nxt[tot] = hed[u], to[tot] = v, val[tot] = w, hed[u] = tot++;</span><br><span class="line">nxt[tot] = hed[v], to[tot] = u, val[tot] = w, hed[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>), dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = id[i]; j &lt;= n; j += j &amp; -j)</span><br><span class="line">s[j] += cst[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">tmp[id[i]] = cst[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">read(opt), read(x), read(y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">u = e[x].u, v = e[x].v;</span><br><span class="line"><span class="keyword">if</span> ((u == tu &amp;&amp; v == tv) || (u == tv &amp;&amp; v == tu)) &#123;</span><br><span class="line">tw = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">u = dep[u] &gt; dep[v] ? u : v;</span><br><span class="line">modify(id[u], y);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans = query_path(x, y);</span><br><span class="line">ans = <span class="built_in">std</span>::min(ans, query_path(x, tu) + query_path(tv, y) + tw);</span><br><span class="line">ans = <span class="built_in">std</span>::min(ans, query_path(y, tu) + query_path(tv, x) + tw);</span><br><span class="line">print(ans, <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题大概是一个基环树上带修改边权的最短距离。可以把他看做一棵树，把多的那条边拎出来，树剖维护距离，分类讨论即可。大概是你谷蓝题难度吧。&lt;/p&gt;
&lt;p&gt;由于树剖只需要查询 dfs 序上区间最小值，可以考虑树状数组维护常熟较小。目前不卡常的情况下你谷效率 rk1 。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="树链剖分" scheme="https://memset0.cn/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="基环树" scheme="https://memset0.cn/tags/%E5%9F%BA%E7%8E%AF%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>洛谷3620 - [APIO/CTSC 2007] 数据备份</title>
    <link href="https://memset0.cn/solution/luogu/3620/"/>
    <id>https://memset0.cn/solution/luogu/3620/</id>
    <published>2018-10-17T12:52:00.000Z</published>
    <updated>2018-12-09T02:11:07.951Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>首先我们把原来的距离数组 $p$ 差分为数组 $a$。原题可以等同为在 $a$ 数组中选择 $k$ 个不相邻的数使得总和最小。</p><p>假设我们已经选择了 $a_i$ ，那么 $a_{i-1}$ 和 $a_{i+1}$ 要么同时选择，要么同时没有被选择。同时，如果我们同时选择，需要的花费即 $V_{a_{i+1}} + V_{a_{i-1}} - V_{a_i}$ 。我们维护一个堆和双向链表，每次从小根堆选择堆顶，把 $a_i$、 $a_{i-1}$ 和 $a_{i+1}$ 同时删除，再新建一个价值为 $V_{a_{i+1}} + V_{a_{i-1}} - V_{a_i}$ 的节点，扔到堆里，重复 $k$ 次就能得到答案。 </p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x = getc(), !<span class="built_in">islower</span>(x) &amp;&amp; !<span class="built_in">isupper</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, pos, l[maxn], r[maxn], tmp[maxn];</span><br><span class="line">ll ans, val[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    ll val;</span><br><span class="line">&#125; u, v;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::priority_queue &lt; node &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m), --n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">        read(tmp[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        val[i] = tmp[i + <span class="number">1</span>] - tmp[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</span><br><span class="line">    pos = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        q.push(node&#123;i, val[i]&#125;);</span><br><span class="line">    val[<span class="number">0</span>] = val[n + <span class="number">1</span>] = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (vis[q.top().id] &amp;&amp; q.size())q.pop();</span><br><span class="line">        <span class="keyword">if</span> (!q.size()) <span class="keyword">break</span>;</span><br><span class="line">        u = q.top(), q.pop();</span><br><span class="line">        vis[u.id] = vis[l[u.id]] = vis[r[u.id]] = <span class="number">1</span>;</span><br><span class="line">        ans += u.val, v.id = ++pos;</span><br><span class="line">        l[v.id] = l[l[u.id]], r[v.id] = r[r[u.id]];</span><br><span class="line">        r[l[v.id]] = v.id, l[r[v.id]] = v.id;</span><br><span class="line">        val[v.id] = v.val = val[l[u.id]] + val[r[u.id]] - val[u.id];</span><br><span class="line">        q.push(v);</span><br><span class="line">    &#125;</span><br><span class="line">    print(ans, <span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们把原来的距离数组 $p$ 差分为数组 $a$。原题可以等同为在 $a$ 数组中选择 $k$ 个不相邻的数使得总和最小。&lt;/p&gt;
&lt;p&gt;假设我们已经选择了 $a_i$ ，那么 $a_{i-1}$ 和 $a_{i+1}$ 要么同时选择，要么同时没有被选择。同时，如果我们同时选择，需要的花费即 $V_{a_{i+1}} + V_{a_{i-1}} - V_{a_i}$ 。我们维护一个堆和双向链表，每次从小根堆选择堆顶，把 $a_i$、 $a_{i-1}$ 和 $a_{i+1}$ 同时删除，再新建一个价值为 $V_{a_{i+1}} + V_{a_{i-1}} - V_{a_i}$ 的节点，扔到堆里，重复 $k$ 次就能得到答案。 &lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="巧妙的思路" scheme="https://memset0.cn/tags/%E5%B7%A7%E5%A6%99%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    
      <category term="二叉堆" scheme="https://memset0.cn/tags/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>Dev C++ 资瓷 Hi DPI 方法</title>
    <link href="https://memset0.cn/geek/devc%E9%AB%98%E5%88%86%E5%B1%8F/"/>
    <id>https://memset0.cn/geek/devc高分屏/</id>
    <published>2018-10-11T04:35:39.000Z</published>
    <updated>2018-12-09T02:04:34.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前提条件，新版 Windows 10 （在有高分屏的机子上装 Win 10 不苛刻吧）。</p><a id="more"></a><p>首先定位到你的 <code>devcpp.exe</code> 文件，一般都在默认的安装目录下，右键他点击属性。</p><p><img src="https://i.loli.net/2018/10/11/5bbed3f461aa4.png" alt=""></p><p>点击 <code>更改高 DPI 设置</code> </p><p><img src="https://i.loli.net/2018/10/11/5bbed3f459fc3.png" alt=""></p><p>点击 <code>替代高 DPI 缩放行为</code> ，并选择 <code>系统（增强）</code>。</p><p><img src="https://i.loli.net/2018/10/11/5bbed3f463d1a.png" alt=""></p><p>重启 Dev C++ 即可看到效果。</p><p>已知问题：</p><ul><li>与 Mactype 不兼容。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前提条件，新版 Windows 10 （在有高分屏的机子上装 Win 10 不苛刻吧）。&lt;/p&gt;
    
    </summary>
    
      <category term="Geek" scheme="https://memset0.cn/categories/Geek/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 生成 SSH 公钥</title>
    <link href="https://memset0.cn/geek/git-add-ssh/"/>
    <id>https://memset0.cn/geek/git-add-ssh/</id>
    <published>2018-10-10T12:20:32.000Z</published>
    <updated>2018-10-10T12:27:57.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>由于最近经常折腾虚拟机和新电脑， git 也经常要重新安装 / 配置，因此记录一下 git 添加 SSH 公钥的方式。</p></blockquote><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>进入目录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果提示目录不存在那么创建一个新目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>输入以下命令生成密钥，会有三个选项调整，直接按回车键使用默认配置即可，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>（很快的）生成密钥后，输入以下命令提取公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>前往 Github 把公钥添加进去即可 qwq 。</p><h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p><a href="https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5" target="_blank" rel="noopener">https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5</a></p><blockquote><p>p.s. MacBook Pro 真好用（逃</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于最近经常折腾虚拟机和新电脑， git 也经常要重新安装 / 配置，因此记录一下 git 添加 SSH 公钥的方式。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Geek" scheme="https://memset0.cn/categories/Geek/"/>
    
    
  </entry>
  
  <entry>
    <title>CF1059D - Nature Reserve</title>
    <link href="https://memset0.cn/solution/codeforces/1059d/"/>
    <id>https://memset0.cn/solution/codeforces/1059d/</id>
    <published>2018-10-07T04:19:20.000Z</published>
    <updated>2018-12-09T02:11:23.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>该死的精度问题让我调了一个小时还没有调出来（事实说明我还是太菜了。）</p></blockquote><p>大概意思就是说平面上给了你一些点然后你要构造一个与 x 轴相切的圆把这些圆都包裹进去。</p><p>考虑二分圆的半径，这样就知道了圆心的 y 坐标，根据点在圆内的充要条件——点到圆心的距离小于等于半径计算出圆心的 x 坐标的范围。如果存在两个范围不相交，说明无法构造出一个符合条件的圆心。</p><p>需要注意浮点数运算的精度问题，比如计算 x 坐标的范围时这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dis = r * r - (r - y) * (r - y);</span><br></pre></td></tr></table></figure><p>就容易被卡，而：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dis = <span class="number">2</span> * r * y - y * y;</span><br></pre></td></tr></table></figure><p>就不容易。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x = getc(), !<span class="built_in">islower</span>(x) &amp;&amp; !<span class="built_in">isupper</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag1, flag2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> l, r, mid, ans, tmp;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> dis, min_rx, max_lx;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> lx[maxn], rx[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        tmp = (<span class="number">2</span> * r - y[i]) * y[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        dis = <span class="built_in">sqrt</span>(tmp);</span><br><span class="line">        lx[i] = x[i] - dis;</span><br><span class="line">        rx[i] = x[i] + dis;</span><br><span class="line">    &#125;</span><br><span class="line">    min_rx = rx[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        min_rx = <span class="built_in">std</span>::min(min_rx, rx[i]);</span><br><span class="line">    max_lx = lx[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        max_lx = <span class="built_in">std</span>::max(max_lx, lx[i]);</span><br><span class="line">    <span class="keyword">if</span> (max_lx &gt; min_rx)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        read(x[i]);</span><br><span class="line">        read(y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (y[i] &lt; <span class="number">0</span>) flag1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y[i] &gt; <span class="number">0</span>) flag2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag1 &amp;&amp; flag2) &#123;</span><br><span class="line">        print(<span class="number">-1</span>, <span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            y[i] = -y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    l = <span class="number">0</span>, r = <span class="number">1000000000000001</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt;= eps &amp;&amp; --cnt) &#123;</span><br><span class="line">        mid = (l + r) * <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::fixed;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::setprecision(<span class="number">8</span>) &lt;&lt; ans;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该死的精度问题让我调了一个小时还没有调出来（事实说明我还是太菜了。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思就是说平面上给了你一些点然后你要构造一个与 x 轴相切的圆把这些圆都包裹进去。&lt;/p&gt;
&lt;p&gt;考虑二分圆的半径，这样就知道了圆心的 y 坐标，根据点在圆内的充要条件——点到圆心的距离小于等于半径计算出圆心的 x 坐标的范围。如果存在两个范围不相交，说明无法构造出一个符合条件的圆心。&lt;/p&gt;
&lt;p&gt;需要注意浮点数运算的精度问题，比如计算 x 坐标的范围时这么写：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dis = r * r - (r - y) * (r - y);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就容易被卡，而：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dis = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * r * y - y * y;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就不容易。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="二分答案" scheme="https://memset0.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="计算几何" scheme="https://memset0.cn/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="浮点数运算" scheme="https://memset0.cn/tags/%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>CF1059E - Split the Tree</title>
    <link href="https://memset0.cn/solution/codeforces/1059e/"/>
    <id>https://memset0.cn/solution/codeforces/1059e/</id>
    <published>2018-10-07T03:57:20.000Z</published>
    <updated>2018-10-10T12:14:53.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>一个永远只能在考完后调出 Codeforces 的题的菜鸡厚颜无耻得跑来写题解了。。。</p></blockquote><p>本题要求把树分成的链必须是垂直路径，也就是说不能同时跨越一颗子树的两个根。也就是说每次选中的路径都是到根节点的一串。</p><p>所以我们可以通过树上倍增预处理出每个节点 $u$ 如果被选中那么最多可以向上形成长度为 $dp[u]$ 的链。接着跑一遍树上 DP 即可。</p><p>预处理时间复杂度 $O(n \log n)$ ，树上 DP 时间复杂度 $O(n)$ 。</p><p>貌似因为 D 题比较难调试，做这题的人比较少？反正我这种菜鸡就算考场有时间写了估计也调不出来吧。</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x = getc(), !<span class="built_in">islower</span>(x) &amp;&amp; !<span class="built_in">isupper</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, x, ans;</span><br><span class="line"><span class="keyword">int</span> c[maxn], f[maxn][<span class="number">20</span>], cnt[maxn], dp[maxn];</span><br><span class="line">ll s, a[maxn], g[maxn][<span class="number">20</span>], sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], to[maxn &lt;&lt; <span class="number">1</span>], nxt[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nxt[tot] = hed[u], to[tot] = v, hed[u] = tot++;</span><br><span class="line">    nxt[tot] = hed[v], to[tot] = u, hed[v] = tot++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line">        <span class="keyword">if</span> (v ^ f[u][<span class="number">0</span>]) &#123;</span><br><span class="line">            f[v][<span class="number">0</span>] = u;</span><br><span class="line">            g[v][<span class="number">0</span>] = a[u];</span><br><span class="line">            dfs1(v);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line">        <span class="keyword">if</span> (v ^ f[u][<span class="number">0</span>]) &#123;</span><br><span class="line">            max = <span class="built_in">std</span>::max(max, dfs2(v));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (!max) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        max = dp[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    read(n), read(m), read(s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        read(a[i]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; s) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        read(x);</span><br><span class="line">        add_edge(x, i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            f[j][i] = f[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">            g[j][i] = g[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>] + g[j][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, u = k; k &lt;= n; k++, u = k) &#123;</span><br><span class="line">        <span class="keyword">int</span> stp = <span class="number">1</span>, sum = a[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> ((stp + (<span class="number">1</span> &lt;&lt; i)) &lt;= m &amp;&amp; (sum + g[u][i]) &lt;= s &amp;&amp; f[u][i]) &#123;</span><br><span class="line">                stp += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">                sum += g[u][i];</span><br><span class="line">                u = f[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        dp[k] = stp;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line">    print(ans, <span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个永远只能在考完后调出 Codeforces 的题的菜鸡厚颜无耻得跑来写题解了。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本题要求把树分成的链必须是垂直路径，也就是说不能同时跨越一颗子树的两个根。也就是说每次选中的路径都是到根节点的一串。&lt;/p&gt;
&lt;p&gt;所以我们可以通过树上倍增预处理出每个节点 $u$ 如果被选中那么最多可以向上形成长度为 $dp[u]$ 的链。接着跑一遍树上 DP 即可。&lt;/p&gt;
&lt;p&gt;预处理时间复杂度 $O(n \log n)$ ，树上 DP 时间复杂度 $O(n)$ 。&lt;/p&gt;
&lt;p&gt;貌似因为 D 题比较难调试，做这题的人比较少？反正我这种菜鸡就算考场有时间写了估计也调不出来吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="树上倍增" scheme="https://memset0.cn/tags/%E6%A0%91%E4%B8%8A%E5%80%8D%E5%A2%9E/"/>
    
      <category term="树形 DP" scheme="https://memset0.cn/tags/%E6%A0%91%E5%BD%A2-DP/"/>
    
      <category term="贪心" scheme="https://memset0.cn/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3551 - [ONTAK2010]Peaks加强版</title>
    <link href="https://memset0.cn/solution/bzoj/3551/"/>
    <id>https://memset0.cn/solution/bzoj/3551/</id>
    <published>2018-09-28T11:53:00.000Z</published>
    <updated>2018-12-09T02:04:54.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这题洛谷的数据太…水，克鲁斯卡尔重构树不连通都可水过。</p></blockquote><ul><li>3545: [ONTAK2010]Peaks</li><li>3551: [ONTAK2010]Peaks加强版</li></ul><p>在线算法：克鲁斯卡尔重构树套主席树。</p><p>在克鲁斯卡尔重构树上维护 DFS 序（或树链剖分）再套上主席树，维护第 $k$ 大。</p><p>当然非加强版由于你是重构树<del>（被针对了）</del>可能要大力卡常。比如加个 fread 以及离散化一下什么的。</p><a id="more"></a><p>代码（ Fast IO 直接用了别人的板子不要在意 qwq）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG std::cerr &lt;&lt; std::clock() &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FastIO  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> str = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Reader</span>  &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str], *s, *t;</span><br><span class="line">        Reader ( ) : s( ), t( ), buf() &#123;    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">pick</span> <span class="params">( )</span>  </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (s == t) ? ( t = buf + fread ( s = buf, <span class="number">1</span>, str , <span class="built_in">stdin</span> ), *s++ ) : ( *s++ );</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">template</span> &lt; <span class="class"><span class="keyword">class</span> <span class="title">T</span> &gt;</span></span><br><span class="line"><span class="class">        <span class="title">inline</span> <span class="title">Reader</span>&amp; <span class="title">operator</span> &gt;&gt; ( <span class="title">T</span>&amp; <span class="title">x</span> )  &#123;</span></span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">short</span> opt;</span><br><span class="line">            opt = (ch != <span class="number">45</span>);</span><br><span class="line">            <span class="keyword">while</span> ( !<span class="built_in">isdigit</span> ( ch = pick () ) &amp;&amp; (ch ^ <span class="number">-1</span>) &amp;&amp; ( ch ^ <span class="number">45</span> ) );</span><br><span class="line">            <span class="keyword">if</span> ( ch == <span class="number">-1</span> )     <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">if</span> ( ch == <span class="number">45</span> )     &#123;   opt = <span class="number">0</span>; ch = pick ();   &#125;</span><br><span class="line">            <span class="keyword">for</span> ( x = <span class="number">-48</span> + ch; <span class="built_in">isdigit</span> ( ch = pick () ); ( x *= <span class="number">10</span> ) += ch - <span class="number">48</span> );</span><br><span class="line">            opt ? <span class="number">1</span> : x = -x;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125; <span class="built_in">cin</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Writer</span>  &#123;</span></span><br><span class="line">        <span class="keyword">char</span> buf[str], *s, *t;</span><br><span class="line">        Writer () : s ( buf ), t( buf + str ), buf ( ) &#123;    &#125;</span><br><span class="line">        ~Writer () &#123; fwrite( buf, <span class="number">1</span>, s - buf, <span class="built_in">stdout</span> ); &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">echo</span> <span class="params">( <span class="keyword">char</span> c )</span>  </span>&#123;</span><br><span class="line">            ( s == t ) ? ( fwrite ( s = buf, <span class="number">1</span>, str, <span class="built_in">stdout</span> ), *s++ = c ) : ( *s++ = c );</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">inline</span> Writer&amp; <span class="keyword">operator</span> &lt;&lt; ( <span class="keyword">long</span> <span class="keyword">long</span> x )  &#123;</span><br><span class="line">            <span class="keyword">if</span>( !x ) <span class="keyword">return</span> echo( <span class="number">48</span> ), *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">int</span> t[<span class="number">21</span>], top;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, echo ( <span class="string">'-'</span> );</span><br><span class="line">            <span class="keyword">while</span> ( x ) t[++top] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> ( top ) echo(t[top--] + <span class="number">48</span>);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">inline</span> Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">const</span> <span class="keyword">char</span>* s)  &#123;</span><br><span class="line">            <span class="keyword">while</span> ( *s ) echo( *s++ ) ;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">endl</span> = <span class="string">"\n"</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> FastIO::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> FastIO::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> FastIO::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>, M = <span class="number">500010</span>, E = N * <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, p, u, v, w, t, x, k, tn, cnt, pos, ord, lastans;</span><br><span class="line"><span class="keyword">int</span> b[N], fa[N], id[N], wid[N], val[N], siz[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">20</span>], g[N][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> lc[E], rc[E], sum[E], root[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;a, <span class="keyword">const</span> edge &amp;b) &#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[N], nxt[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">nxt[tot] = hed[u], to[tot] = v, hed[u] = tot++;</span><br><span class="line">nxt[tot] = hed[v], to[tot] = u, hed[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[u] == u) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">return</span> fa[u] = find(fa[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">siz[u] = <span class="number">1</span>, id[u] = ++pos, wid[id[u]] = u, vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line"><span class="keyword">if</span> (v ^ f[u][<span class="number">0</span>]) &#123;</span><br><span class="line">f[v][<span class="number">0</span>] = u;</span><br><span class="line">g[v][<span class="number">0</span>] = (u &lt;= n ? <span class="number">0</span> : val[u]);</span><br><span class="line">dfs(v);</span><br><span class="line">siz[u] += siz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">u = ++ord, lc[u] = lc[v], rc[u] = rc[v], sum[u] = sum[v] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= mid) build(lc[u], lc[v], l, mid, k);</span><br><span class="line"><span class="keyword">else</span> build(rc[u], rc[v], mid + <span class="number">1</span>, r, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> (k &lt;= (sum[v] - sum[u]) ? b[l] : <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, tmp;</span><br><span class="line">tmp = sum[rc[v]] - sum[rc[u]];</span><br><span class="line"><span class="keyword">if</span> (k &lt;= tmp)</span><br><span class="line"><span class="keyword">return</span> query(rc[u], rc[v], mid + <span class="number">1</span>, r, k);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> query(lc[u], lc[v], l, mid, k - tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; val[i];</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::sort(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">fa[i] = i;</span><br><span class="line">cnt = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">b[i] = val[i];</span><br><span class="line"><span class="built_in">std</span>::sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">tn = <span class="built_in">std</span>::unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">val[i] = <span class="built_in">std</span>::lower_bound(b + <span class="number">1</span>, b + tn + <span class="number">1</span>, val[i]) - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">u = e[i].u, v = e[i].v, w = e[i].w;</span><br><span class="line"><span class="keyword">if</span>  (find(u) ^ find(v)) &#123;</span><br><span class="line">t = ++cnt;</span><br><span class="line">u = find(u), v = find(v);</span><br><span class="line">fa[u] = fa[v] = t;</span><br><span class="line">add_edge(u, t);</span><br><span class="line">add_edge(v, t);</span><br><span class="line">val[t] = w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val[++cnt] = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)</span><br><span class="line"><span class="keyword">if</span> (find(i) != find(cnt)) &#123;</span><br><span class="line">add_edge(find(i), cnt);</span><br><span class="line">fa[find(i)] = find(cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(cnt);</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line"><span class="keyword">if</span> (wid[i] &lt;= n)</span><br><span class="line">build(root[i], root[i - <span class="number">1</span>], <span class="number">1</span>, tn, val[wid[i]]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">root[i] = root[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++) &#123;</span><br><span class="line">f[j][i] = f[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">g[j][i] = <span class="built_in">std</span>::max(g[j][i - <span class="number">1</span>], g[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; x &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> (~lastans) &#123;</span><br><span class="line">u ^= lastans;</span><br><span class="line">x ^= lastans;</span><br><span class="line">k ^= lastans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (re <span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (x &gt;= g[u][i] &amp;&amp; f[u][i]) &#123;</span><br><span class="line">u = f[u][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (lastans = query(root[id[u] - <span class="number">1</span>], root[id[u] + siz[u] - <span class="number">1</span>], <span class="number">1</span>, tn, k)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这题洛谷的数据太…水，克鲁斯卡尔重构树不连通都可水过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;3545: [ONTAK2010]Peaks&lt;/li&gt;
&lt;li&gt;3551: [ONTAK2010]Peaks加强版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在线算法：克鲁斯卡尔重构树套主席树。&lt;/p&gt;
&lt;p&gt;在克鲁斯卡尔重构树上维护 DFS 序（或树链剖分）再套上主席树，维护第 $k$ 大。&lt;/p&gt;
&lt;p&gt;当然非加强版由于你是重构树&lt;del&gt;（被针对了）&lt;/del&gt;可能要大力卡常。比如加个 fread 以及离散化一下什么的。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="主席树" scheme="https://memset0.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="强制在线" scheme="https://memset0.cn/tags/%E5%BC%BA%E5%88%B6%E5%9C%A8%E7%BA%BF/"/>
    
      <category term="克鲁斯卡尔重构树" scheme="https://memset0.cn/tags/%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E9%87%8D%E6%9E%84%E6%A0%91/"/>
    
      <category term="DFS 序" scheme="https://memset0.cn/tags/DFS-%E5%BA%8F/"/>
    
      <category term="树上倍增" scheme="https://memset0.cn/tags/%E6%A0%91%E4%B8%8A%E5%80%8D%E5%A2%9E/"/>
    
      <category term="树链剖分" scheme="https://memset0.cn/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1002 - [FJOI2007]轮状病毒</title>
    <link href="https://memset0.cn/solution/bzoj/1002/"/>
    <id>https://memset0.cn/solution/bzoj/1002/</id>
    <published>2018-09-28T11:36:00.000Z</published>
    <updated>2018-12-09T02:04:54.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这题的规律是很好找的，难的就是需要用高精度进行计算。</p><p>于是我…厚颜无耻地逃避了高精度，用 Python 打了个表：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span><span class="params">(x)</span>:</span></span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, x):</span><br><span class="line">        a.append(a[<span class="number">-1</span>] + a[<span class="number">-2</span>])</span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">    <span class="keyword">return</span> a[x - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(x)</span>:</span></span><br><span class="line">    t = locate(x)</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> t ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> t ** <span class="number">2</span> - <span class="number">4</span></span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">print(solve(n))</span><br></pre></td></tr></table></figure><a id="more"></a><p>C++ 交表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">' '</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> ans[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    init();</span><br><span class="line">    </span><br><span class="line">    read(n);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans[n] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans[<span class="number">1</span>] = <span class="string">"1"</span>;</span><br><span class="line">    ans[<span class="number">2</span>] = <span class="string">"5"</span>;</span><br><span class="line">    ans[<span class="number">3</span>] = <span class="string">"16"</span>;</span><br><span class="line">    ans[<span class="number">4</span>] = <span class="string">"45"</span>;</span><br><span class="line">    ans[<span class="number">5</span>] = <span class="string">"121"</span>;</span><br><span class="line">    ans[<span class="number">6</span>] = <span class="string">"320"</span>;</span><br><span class="line">    ans[<span class="number">7</span>] = <span class="string">"841"</span>;</span><br><span class="line">    ans[<span class="number">8</span>] = <span class="string">"2205"</span>;</span><br><span class="line">    ans[<span class="number">9</span>] = <span class="string">"5776"</span>;</span><br><span class="line">    ans[<span class="number">10</span>] = <span class="string">"15125"</span>;</span><br><span class="line">    ans[<span class="number">11</span>] = <span class="string">"39601"</span>;</span><br><span class="line">    ans[<span class="number">12</span>] = <span class="string">"103680"</span>;</span><br><span class="line">    ans[<span class="number">13</span>] = <span class="string">"271441"</span>;</span><br><span class="line">    ans[<span class="number">14</span>] = <span class="string">"710645"</span>;</span><br><span class="line">    ans[<span class="number">15</span>] = <span class="string">"1860496"</span>;</span><br><span class="line">    ans[<span class="number">16</span>] = <span class="string">"4870845"</span>;</span><br><span class="line">    ans[<span class="number">17</span>] = <span class="string">"12752041"</span>;</span><br><span class="line">    ans[<span class="number">18</span>] = <span class="string">"33385280"</span>;</span><br><span class="line">    ans[<span class="number">19</span>] = <span class="string">"87403801"</span>;</span><br><span class="line">    ans[<span class="number">20</span>] = <span class="string">"228826125"</span>;</span><br><span class="line">    ans[<span class="number">21</span>] = <span class="string">"599074576"</span>;</span><br><span class="line">    ans[<span class="number">22</span>] = <span class="string">"1568397605"</span>;</span><br><span class="line">    ans[<span class="number">23</span>] = <span class="string">"4106118241"</span>;</span><br><span class="line">    ans[<span class="number">24</span>] = <span class="string">"10749957120"</span>;</span><br><span class="line">    ans[<span class="number">25</span>] = <span class="string">"28143753121"</span>;</span><br><span class="line">    ans[<span class="number">26</span>] = <span class="string">"73681302245"</span>;</span><br><span class="line">    ans[<span class="number">27</span>] = <span class="string">"192900153616"</span>;</span><br><span class="line">    ans[<span class="number">28</span>] = <span class="string">"505019158605"</span>;</span><br><span class="line">    ans[<span class="number">29</span>] = <span class="string">"1322157322201"</span>;</span><br><span class="line">    ans[<span class="number">30</span>] = <span class="string">"3461452808000"</span>;</span><br><span class="line">    ans[<span class="number">31</span>] = <span class="string">"9062201101801"</span>;</span><br><span class="line">    ans[<span class="number">32</span>] = <span class="string">"23725150497405"</span>;</span><br><span class="line">    ans[<span class="number">33</span>] = <span class="string">"62113250390416"</span>;</span><br><span class="line">    ans[<span class="number">34</span>] = <span class="string">"162614600673845"</span>;</span><br><span class="line">    ans[<span class="number">35</span>] = <span class="string">"425730551631121"</span>;</span><br><span class="line">    ans[<span class="number">36</span>] = <span class="string">"1114577054219520"</span>;</span><br><span class="line">    ans[<span class="number">37</span>] = <span class="string">"2918000611027441"</span>;</span><br><span class="line">    ans[<span class="number">38</span>] = <span class="string">"7639424778862805"</span>;</span><br><span class="line">    ans[<span class="number">39</span>] = <span class="string">"20000273725560976"</span>;</span><br><span class="line">    ans[<span class="number">40</span>] = <span class="string">"52361396397820125"</span>;</span><br><span class="line">    ans[<span class="number">41</span>] = <span class="string">"137083915467899401"</span>;</span><br><span class="line">    ans[<span class="number">42</span>] = <span class="string">"358890350005878080"</span>;</span><br><span class="line">    ans[<span class="number">43</span>] = <span class="string">"939587134549734841"</span>;</span><br><span class="line">    ans[<span class="number">44</span>] = <span class="string">"2459871053643326445"</span>;</span><br><span class="line">    ans[<span class="number">45</span>] = <span class="string">"6440026026380244496"</span>;</span><br><span class="line">    ans[<span class="number">46</span>] = <span class="string">"16860207025497407045"</span>;</span><br><span class="line">    ans[<span class="number">47</span>] = <span class="string">"44140595050111976641"</span>;</span><br><span class="line">    ans[<span class="number">48</span>] = <span class="string">"115561578124838522880"</span>;</span><br><span class="line">    ans[<span class="number">49</span>] = <span class="string">"302544139324403592001"</span>;</span><br><span class="line">    ans[<span class="number">50</span>] = <span class="string">"792070839848372253125"</span>;</span><br><span class="line">    ans[<span class="number">51</span>] = <span class="string">"2073668380220713167376"</span>;</span><br><span class="line">    ans[<span class="number">52</span>] = <span class="string">"5428934300813767249005"</span>;</span><br><span class="line">    ans[<span class="number">53</span>] = <span class="string">"14213134522220588579641"</span>;</span><br><span class="line">    ans[<span class="number">54</span>] = <span class="string">"37210469265847998489920"</span>;</span><br><span class="line">    ans[<span class="number">55</span>] = <span class="string">"97418273275323406890121"</span>;</span><br><span class="line">    ans[<span class="number">56</span>] = <span class="string">"255044350560122222180445"</span>;</span><br><span class="line">    ans[<span class="number">57</span>] = <span class="string">"667714778405043259651216"</span>;</span><br><span class="line">    ans[<span class="number">58</span>] = <span class="string">"1748099984655007556773205"</span>;</span><br><span class="line">    ans[<span class="number">59</span>] = <span class="string">"4576585175559979410668401"</span>;</span><br><span class="line">    ans[<span class="number">60</span>] = <span class="string">"11981655542024930675232000"</span>;</span><br><span class="line">    ans[<span class="number">61</span>] = <span class="string">"31368381450514812615027601"</span>;</span><br><span class="line">    ans[<span class="number">62</span>] = <span class="string">"82123488809519507169850805"</span>;</span><br><span class="line">    ans[<span class="number">63</span>] = <span class="string">"215002084978043708894524816"</span>;</span><br><span class="line">    ans[<span class="number">64</span>] = <span class="string">"562882766124611619513723645"</span>;</span><br><span class="line">    ans[<span class="number">65</span>] = <span class="string">"1473646213395791149646646121"</span>;</span><br><span class="line">    ans[<span class="number">66</span>] = <span class="string">"3858055874062761829426214720"</span>;</span><br><span class="line">    ans[<span class="number">67</span>] = <span class="string">"10100521408792494338631998041"</span>;</span><br><span class="line">    ans[<span class="number">68</span>] = <span class="string">"26443508352314721186469779405"</span>;</span><br><span class="line">    ans[<span class="number">69</span>] = <span class="string">"69230003648151669220777340176"</span>;</span><br><span class="line">    ans[<span class="number">70</span>] = <span class="string">"181246502592140286475862241125"</span>;</span><br><span class="line">    ans[<span class="number">71</span>] = <span class="string">"474509504128269190206809383201"</span>;</span><br><span class="line">    ans[<span class="number">72</span>] = <span class="string">"1242282009792667284144565908480"</span>;</span><br><span class="line">    ans[<span class="number">73</span>] = <span class="string">"3252336525249732662226888342241"</span>;</span><br><span class="line">    ans[<span class="number">74</span>] = <span class="string">"8514727565956530702536099118245"</span>;</span><br><span class="line">    ans[<span class="number">75</span>] = <span class="string">"22291846172619859445381409012496"</span>;</span><br><span class="line">    ans[<span class="number">76</span>] = <span class="string">"58360810951903047633608127919245"</span>;</span><br><span class="line">    ans[<span class="number">77</span>] = <span class="string">"152790586683089283455442974745241"</span>;</span><br><span class="line">    ans[<span class="number">78</span>] = <span class="string">"400010949097364802732720796316480"</span>;</span><br><span class="line">    ans[<span class="number">79</span>] = <span class="string">"1047242260609005124742719414204201"</span>;</span><br><span class="line">    ans[<span class="number">80</span>] = <span class="string">"2741715832729650571495437446296125"</span>;</span><br><span class="line">    ans[<span class="number">81</span>] = <span class="string">"7177905237579946589743592924684176"</span>;</span><br><span class="line">    ans[<span class="number">82</span>] = <span class="string">"18791999880010189197735341327756405"</span>;</span><br><span class="line">    ans[<span class="number">83</span>] = <span class="string">"49198094402450621003462431058585041"</span>;</span><br><span class="line">    ans[<span class="number">84</span>] = <span class="string">"128802283327341673812651951847998720"</span>;</span><br><span class="line">    ans[<span class="number">85</span>] = <span class="string">"337208755579574400434493424485411121"</span>;</span><br><span class="line">    ans[<span class="number">86</span>] = <span class="string">"882823983411381527490828321608234645"</span>;</span><br><span class="line">    ans[<span class="number">87</span>] = <span class="string">"2311263194654570182037991540339292816"</span>;</span><br><span class="line">    ans[<span class="number">88</span>] = <span class="string">"6050965600552329018623146299409643805"</span>;</span><br><span class="line">    ans[<span class="number">89</span>] = <span class="string">"15841633607002416873831447357889638601"</span>;</span><br><span class="line">    ans[<span class="number">90</span>] = <span class="string">"41473935220454921602871195774259272000"</span>;</span><br><span class="line">    ans[<span class="number">91</span>] = <span class="string">"108580172054362347934782139964888177401"</span>;</span><br><span class="line">    ans[<span class="number">92</span>] = <span class="string">"284266580942632122201475224120405260205"</span>;</span><br><span class="line">    ans[<span class="number">93</span>] = <span class="string">"744219570773534018669643532396327603216"</span>;</span><br><span class="line">    ans[<span class="number">94</span>] = <span class="string">"1948392131377969933807455373068577549445"</span>;</span><br><span class="line">    ans[<span class="number">95</span>] = <span class="string">"5100956823360375782752722586809405045121"</span>;</span><br><span class="line">    ans[<span class="number">96</span>] = <span class="string">"13354478338703157414450712387359637585920"</span>;</span><br><span class="line">    ans[<span class="number">97</span>] = <span class="string">"34962478192749096460599414575269507712641"</span>;</span><br><span class="line">    ans[<span class="number">98</span>] = <span class="string">"91532956239544131967347531338448885552005"</span>;</span><br><span class="line">    ans[<span class="number">99</span>] = <span class="string">"239636390525883299441443179440077148943376"</span>;</span><br><span class="line">    ans[<span class="number">100</span>] = <span class="string">"627376215338105766356982006981782561278125"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题的规律是很好找的，难的就是需要用高精度进行计算。&lt;/p&gt;
&lt;p&gt;于是我…厚颜无耻地逃避了高精度，用 Python 打了个表：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;locate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, x):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a.append(a[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + a[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# print(a)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a[x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = locate(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t ** &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; t ** &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = int(input())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(solve(n))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="数学，数论" scheme="https://memset0.cn/tags/%E6%95%B0%E5%AD%A6%EF%BC%8C%E6%95%B0%E8%AE%BA/"/>
    
      <category term="打表" scheme="https://memset0.cn/tags/%E6%89%93%E8%A1%A8/"/>
    
      <category term="结论题" scheme="https://memset0.cn/tags/%E7%BB%93%E8%AE%BA%E9%A2%98/"/>
    
      <category term="高精度" scheme="https://memset0.cn/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2956 - 模积和</title>
    <link href="https://memset0.cn/solution/bzoj/2956/"/>
    <id>https://memset0.cn/solution/bzoj/2956/</id>
    <published>2018-09-27T03:18:00.000Z</published>
    <updated>2018-12-09T02:04:54.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>$$\sum_{i=1}^{n} \sum_{j=1}^{m} (n \% i) \times (m \% j) \ \ \ (i \not= j)$$</p><p>$$= (\sum_{i=1}^{n} n \% i) \times (\sum_{j=1}^{m} m \% j) - \sum_{i=1}^{\min(n, m)} (n \% i) \times (m \% j)$$</p><p>可以转化成 $A \times B - C$ 的形式，分别来求。</p><p>其中求 $A$ 和 $B$ 的方式是一样的，可以数论分块，也可以直接打表找规律。鉴于这部分不难，笔者写了后者，而描述起来而笔者又非常懒因此忽略求 $A$ 、 $B$ 直接讲求 $C$ 。当然你也可以通过推 $C$ 的方式自己推一下 $A$ 、 $B$ 。</p><p>$$C = \sum_{i=1}^{\min(n, m)} (n \% i) \times (m \% i)$$</p><p>$$= \sum_{i=1} ^ {\min(n, m)} (n - i \times \lfloor \frac {n} {i} \rfloor) \times (m - i \times \lfloor \frac {m} {i} \rfloor )$$</p><p>$$= \sum_{i=1} ^ {\min(n, m)} n \times m - m \times  i \times \lfloor \frac {n} {i} \rfloor - n \times i \times \lfloor \frac {m} {i} \rfloor + i ^ 2 \times \lfloor \frac {m} {i} \rfloor \lfloor \frac {m} {i} \rfloor $$</p><p>数论分块即可。</p><a id="more"></a><p>鉴于笔者写代码时思路非常混乱，下面仅供对拍：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">'\n'</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line"><span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line"><span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p = <span class="number">19940417</span>;</span><br><span class="line"></span><br><span class="line">ll n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll &amp;x)</span> </span>&#123;</span><br><span class="line">x = (x % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">ll a = n, b = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) a /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> b /= <span class="number">2</span>;</span><br><span class="line">a %= p, b %= p;</span><br><span class="line"><span class="keyword">return</span> a * b % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll l, ll r)</span> </span>&#123;</span><br><span class="line">ll a = l + r, b = r - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) a /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> b /= <span class="number">2</span>;</span><br><span class="line">a %= p, b %= p;</span><br><span class="line"><span class="keyword">return</span> a * b % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">sum2</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">ll a = n, b = n + <span class="number">1</span>, c = (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>) a /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">0</span>) b /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> c /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">3</span> == <span class="number">0</span>) a /= <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">3</span> == <span class="number">0</span>) b /= <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> c /= <span class="number">3</span>;</span><br><span class="line">a %= p, b %= p, c %= p;</span><br><span class="line"><span class="keyword">return</span> a * b % p * c % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">ll m, ans = <span class="number">0</span>, sqn = <span class="built_in">sqrt</span>(n), x, i, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>, x = n; x &gt; sqn; i++) &#123;</span><br><span class="line">t = m = (n - (n / i)) - (n - x);</span><br><span class="line">m %= p;</span><br><span class="line">ans += (n % x) % p * (m % p) % p, update(ans);</span><br><span class="line">ans += sum(m) % p * ((i - <span class="number">1</span>) % p) % p, update(ans);</span><br><span class="line">x -= t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">ans += (n % i) % p, update(ans);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve2</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; m) <span class="built_in">std</span>::swap(n, m);</span><br><span class="line">ll ans = n * n % p * m % p;</span><br><span class="line"><span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">r = <span class="built_in">std</span>::min(n / (n / l), m / (m / l));</span><br><span class="line">ans -= n % p * (m / l % p) % p * sum(l, r) % p, update(ans);</span><br><span class="line">ans -= m % p * (n / l % p) % p * sum(l, r) % p, update(ans);</span><br><span class="line">ans += (n / l % p) * (m / l % p) % p * ((sum2(r) - sum2(l - <span class="number">1</span>) + p) % p) % p, update(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n), read(m);</span><br><span class="line">print((solve(n) * solve(m) % p - solve2(n, m) + p) % p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$$\sum_{i=1}^{n} \sum_{j=1}^{m} (n \% i) \times (m \% j) \ \ \ (i \not= j)$$&lt;/p&gt;
&lt;p&gt;$$= (\sum_{i=1}^{n} n \% i) \times (\sum_{j=1}^{m} m \% j) - \sum_{i=1}^{\min(n, m)} (n \% i) \times (m \% j)$$&lt;/p&gt;
&lt;p&gt;可以转化成 $A \times B - C$ 的形式，分别来求。&lt;/p&gt;
&lt;p&gt;其中求 $A$ 和 $B$ 的方式是一样的，可以数论分块，也可以直接打表找规律。鉴于这部分不难，笔者写了后者，而描述起来而笔者又非常懒因此忽略求 $A$ 、 $B$ 直接讲求 $C$ 。当然你也可以通过推 $C$ 的方式自己推一下 $A$ 、 $B$ 。&lt;/p&gt;
&lt;p&gt;$$C = \sum_{i=1}^{\min(n, m)} (n \% i) \times (m \% i)$$&lt;/p&gt;
&lt;p&gt;$$= \sum_{i=1} ^ {\min(n, m)} (n - i \times \lfloor \frac {n} {i} \rfloor) \times (m - i \times \lfloor \frac {m} {i} \rfloor )$$&lt;/p&gt;
&lt;p&gt;$$= \sum_{i=1} ^ {\min(n, m)} n \times m - m \times  i \times \lfloor \frac {n} {i} \rfloor - n \times i \times \lfloor \frac {m} {i} \rfloor + i ^ 2 \times \lfloor \frac {m} {i} \rfloor \lfloor \frac {m} {i} \rfloor $$&lt;/p&gt;
&lt;p&gt;数论分块即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="数论分块" scheme="https://memset0.cn/tags/%E6%95%B0%E8%AE%BA%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ2588 - Count on a tree</title>
    <link href="https://memset0.cn/solution/bzoj/2588/"/>
    <id>https://memset0.cn/solution/bzoj/2588/</id>
    <published>2018-09-27T03:14:00.000Z</published>
    <updated>2018-12-09T02:04:54.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>询问树上路径第 $k$ 大：二分答案 + 树上查询。查询时用主席树差分 $tree[now] = tree[u] + tree[v] - tree[lca(u,v)] - tree[father(lca(u,v))]$ 即可。</p><p>时间复杂度 $O(n \log ^2 n)$</p><a id="more"></a><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line"><span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">'\n'</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line"><span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line"><span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>, maxe = maxn * <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, u, v, l, r, k, t, tn, pos, mid, ans, now, lastans;</span><br><span class="line"><span class="keyword">int</span> val[maxn], tmp[maxn], root[maxn], dep[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxe], lc[maxe], rc[maxe];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], to[maxn &lt;&lt; <span class="number">1</span>], nxt[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">nxt[tot] = hed[u], to[tot] = v;</span><br><span class="line">hed[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> l = <span class="number">1</span>, <span class="keyword">int</span> r = tn)</span> </span>&#123;</span><br><span class="line">u = ++pos;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(lc[u], l, mid);</span><br><span class="line">build(rc[u], mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> v, <span class="keyword">int</span> k, <span class="keyword">int</span> l = <span class="number">1</span>, <span class="keyword">int</span> r = tn)</span> </span>&#123;</span><br><span class="line">u = ++pos;</span><br><span class="line">lc[u] = lc[v], rc[u] = rc[v], sum[u] = sum[v] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= mid) modify(lc[u], lc[v], k, l, mid);</span><br><span class="line"><span class="keyword">else</span> modify(rc[u], rc[v], k, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d, <span class="keyword">int</span> k, <span class="keyword">int</span> l = <span class="number">1</span>, <span class="keyword">int</span> r = tn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> now = sum[lc[a]] + sum[lc[b]] - sum[lc[c]] - sum[lc[d]];</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k &lt;= now) <span class="keyword">return</span> query(lc[a], lc[b], lc[c], lc[d], k, l, mid);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(rc[a], rc[b], rc[c], rc[d], k - now, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">modify(root[u], root[f[u][<span class="number">0</span>]], val[u]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line"><span class="keyword">if</span> (v ^ f[u][<span class="number">0</span>])  &#123;</span><br><span class="line">f[v][<span class="number">0</span>] = u;</span><br><span class="line">dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &gt; dep[v])</span><br><span class="line"> <span class="built_in">std</span>::swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (dep[f[v][i]] &gt;= dep[u])</span><br><span class="line">v = f[v][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (f[u][i] ^ f[v][i])</span><br><span class="line">u = f[u][i], v = f[v][i];</span><br><span class="line"><span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen("INPUT", "r", stdin);</span></span><br><span class="line"></span><br><span class="line">read(n), read(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">read(val[i]);</span><br><span class="line">tmp[i] = val[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>);</span><br><span class="line">tn = <span class="built_in">std</span>::unique(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>) - tmp - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">val[i] = <span class="built_in">std</span>::lower_bound(tmp + <span class="number">1</span>, tmp + tn + <span class="number">1</span>, val[i]) - tmp;</span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= n; i++)</span></span><br><span class="line"><span class="comment">//print(val[i], ' ');</span></span><br><span class="line"><span class="comment">//putc('\n');</span></span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= tn; i++)</span></span><br><span class="line"><span class="comment">//print(tmp[i], ' ');</span></span><br><span class="line"><span class="comment">//putc('\n');</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">read(u), read(v);</span><br><span class="line">add_edge(u, v);</span><br><span class="line">add_edge(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build(root[<span class="number">0</span>]);</span><br><span class="line">dep[<span class="number">1</span>] = <span class="number">1</span>, dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">f[j][i] = f[f[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">read(u), read(v), read(k);</span><br><span class="line">u ^= lastans, t = lca(u, v);</span><br><span class="line">print(lastans = tmp[query(root[u], root[v], root[t], root[f[t][<span class="number">0</span>]], k)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;询问树上路径第 $k$ 大：二分答案 + 树上查询。查询时用主席树差分 $tree[now] = tree[u] + tree[v] - tree[lca(u,v)] - tree[father(lca(u,v))]$ 即可。&lt;/p&gt;
&lt;p&gt;时间复杂度 $O(n \log ^2 n)$&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="主席树" scheme="https://memset0.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="树上差分" scheme="https://memset0.cn/tags/%E6%A0%91%E4%B8%8A%E5%B7%AE%E5%88%86/"/>
    
      <category term="二分答案" scheme="https://memset0.cn/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>CF776D - The Door Problem</title>
    <link href="https://memset0.cn/solution/codeforces/776d/"/>
    <id>https://memset0.cn/solution/codeforces/776d/</id>
    <published>2018-09-26T00:49:00.000Z</published>
    <updated>2018-10-10T12:14:53.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于每个门只会被两个钥匙控制，那么两个钥匙的选或不选就能建立起一种对应关系。即如果门本来是开着的，那么用了一把必须用另一把，不用一把必须不用另一把；如果们本来是开着的，那么不用一把必须用另一把，用了一把必须不用另一把。</p><p>Tarjan 跑 2-SAT 随手切，注意 $n$ 和 $m$ 不要搞反。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">'\n'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); putc(c); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200010</span>, maxm = <span class="number">400010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, t, x, cnt, pos, top;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn][<span class="number">2</span>], low[maxn], dfn[maxn], stk[maxn], ins[maxn], col[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], nxt[maxm], to[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    nxt[tot] = hed[u], to[tot] = v;</span><br><span class="line">    hed[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++pos;</span><br><span class="line">    ins[u] = <span class="number">1</span>, stk[++top] = u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u]; i; i = nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = <span class="built_in">std</span>::min(low[u], low[v]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ins[v]) &#123;</span><br><span class="line">            low[u] = <span class="built_in">std</span>::min(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="keyword">while</span> (top) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = stk[top--];</span><br><span class="line">            col[v] = cnt;</span><br><span class="line">            ins[v] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (u == v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        read(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        read(t);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= t; j++) &#123;</span><br><span class="line">            read(x);</span><br><span class="line">            b[x][b[x][<span class="number">0</span>] ? <span class="number">1</span> : <span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line">            add_edge(b[i][<span class="number">0</span>], b[i][<span class="number">1</span>]);</span><br><span class="line">            add_edge(b[i][<span class="number">1</span>], b[i][<span class="number">0</span>]);</span><br><span class="line">            add_edge(b[i][<span class="number">0</span>] + m, b[i][<span class="number">1</span>] + m);</span><br><span class="line">            add_edge(b[i][<span class="number">1</span>] + m, b[i][<span class="number">0</span>] + m);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            add_edge(b[i][<span class="number">0</span>], b[i][<span class="number">1</span>] + m);</span><br><span class="line">            add_edge(b[i][<span class="number">1</span>] + m, b[i][<span class="number">0</span>]);</span><br><span class="line">            add_edge(b[i][<span class="number">1</span>], b[i][<span class="number">0</span>] + m);</span><br><span class="line">            add_edge(b[i][<span class="number">0</span>] + m, b[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (m &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (m &lt;&lt; <span class="number">1</span>); i++)</span><br><span class="line">        <span class="keyword">if</span> (col[i] == col[i + m]) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于每个门只会被两个钥匙控制，那么两个钥匙的选或不选就能建立起一种对应关系。即如果门本来是开着的，那么用了一把必须用另一把，不用一把必须不用另一把；如果们本来是开着的，那么不用一把必须用另一把，用了一把必须不用另一把。&lt;/p&gt;
&lt;p&gt;Tarjan 跑 2-SAT 随手切，注意 $n$ 和 $m$ 不要搞反。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="2-SAT" scheme="https://memset0.cn/tags/2-SAT/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1070 - [SCOI2007]修车</title>
    <link href="https://memset0.cn/solution/bzoj/1070/"/>
    <id>https://memset0.cn/solution/bzoj/1070/</id>
    <published>2018-09-25T02:13:00.000Z</published>
    <updated>2018-12-09T02:04:54.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最小费用最大流。由于一个工人在给一个顾客服务后还能再给一个顾客服务， 所以把每个顾客和每个工人建点显然不能完成任务。</p><p>那么我们考虑把第 $i$ 个工人建成 $n$ 个点，表示为 $P(i,j)  (i \in [1, m], j \in [1, n])$。把第 $i$ 个顾客表示为 $T(k)$。</p><p>把 $T(k)$ 依次向 $P(i,j)$ 连边，流量为 $1$ ，费用为 $w(k,i) \times j$ 。表示第 $k$ 个顾客被第 $i$ 个工人倒数第 $j$ 个服务对答案产生的贡献（即包括在它之后的人的等待时间，而不是这个人自己的花费）。</p><p>最后从源点向每个顾客连流量 $1$ ，费用 $0$ 的边，$n \times m$ 个工人向汇点连流量 $1$ ，费用为 $0$ 的边，跑最小费用最大流即可。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="comment">//  author: memset0</span></span><br><span class="line"><span class="comment">//  website: https://memset0.cn</span></span><br><span class="line"><span class="comment">// ==============================</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for (int i = l; i &lt;= r; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(x) getchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(x) putchar(x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">register</span> <span class="keyword">char</span> ch; <span class="keyword">register</span> <span class="keyword">bool</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), ch &lt; <span class="number">48</span> || <span class="number">57</span> &lt; ch) fl ^= ch == <span class="string">'-'</span>; x = (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch = getc(), <span class="number">47</span> &lt; ch &amp;&amp; ch &lt; <span class="number">58</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch &amp; <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (fl) x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(T x, <span class="keyword">char</span> c = <span class="string">'\n'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> buf[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; putc(<span class="string">'0'</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) putc(<span class="string">'-'</span>), x = -x;</span><br><span class="line">    <span class="keyword">for</span> (buf[<span class="number">0</span>] = <span class="number">0</span>; x; x /= <span class="number">10</span>) buf[++buf[<span class="number">0</span>]] = x % <span class="number">10</span> + <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span> (buf[<span class="number">0</span>]) putc((<span class="keyword">char</span>) buf[buf[<span class="number">0</span>]--]);</span><br><span class="line">    putc(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4010</span>, maxm = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> at(i,j) ((i) * m + (j))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, u, v, w, s, e, l, r, ans, flag;</span><br><span class="line"><span class="keyword">int</span> dis[maxn], pre[maxn], inq[maxn], q[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">2</span>, hed[maxn], nxt[maxm], to[maxm], val[maxm], cst[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_simple_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    nxt[tot] = hed[u], to[tot] = v, val[tot] = w, cst[tot] = c;</span><br><span class="line">    hed[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    add_simple_edge(u, v, w, c);</span><br><span class="line">    add_simple_edge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">63</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    l = r = <span class="number">1</span>, q[<span class="number">1</span>] = s, inq[s] = <span class="number">1</span>, dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        u = q[(l++) % (e + <span class="number">2</span>)], inq[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = hed[u], v = to[i]; i; i = nxt[i], v = to[i])</span><br><span class="line">            <span class="keyword">if</span> (val[i] &amp;&amp; dis[v] &gt; dis[u] + cst[i]) &#123;</span><br><span class="line">                dis[v] = dis[u] + cst[i];</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!inq[v]) &#123;</span><br><span class="line">                    inq[v] = <span class="number">1</span>;</span><br><span class="line">                    q[(++r) % (e + <span class="number">2</span>)] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre[e];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    read(n), read(m);</span><br><span class="line">    s = n * m + m + <span class="number">1</span>, e = s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            read(w);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++)</span><br><span class="line">                add_edge(i, at(j, k), <span class="number">1</span>, w * k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        add_edge(s, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            add_edge(at(i, j), e, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (spfa()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[e]; i; i = pre[to[i ^ <span class="number">1</span>]])</span><br><span class="line">            val[i] -= <span class="number">1</span>, val[i ^ <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[e]; i; i = pre[to[i ^ <span class="number">1</span>]])</span><br><span class="line">            ans += cst[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, ans / (<span class="keyword">double</span>)m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最小费用最大流。由于一个工人在给一个顾客服务后还能再给一个顾客服务， 所以把每个顾客和每个工人建点显然不能完成任务。&lt;/p&gt;
&lt;p&gt;那么我们考虑把第 $i$ 个工人建成 $n$ 个点，表示为 $P(i,j)  (i \in [1, m], j \in [1, n])$。把第 $i$ 个顾客表示为 $T(k)$。&lt;/p&gt;
&lt;p&gt;把 $T(k)$ 依次向 $P(i,j)$ 连边，流量为 $1$ ，费用为 $w(k,i) \times j$ 。表示第 $k$ 个顾客被第 $i$ 个工人倒数第 $j$ 个服务对答案产生的贡献（即包括在它之后的人的等待时间，而不是这个人自己的花费）。&lt;/p&gt;
&lt;p&gt;最后从源点向每个顾客连流量 $1$ ，费用 $0$ 的边，$n \times m$ 个工人向汇点连流量 $1$ ，费用为 $0$ 的边，跑最小费用最大流即可。&lt;/p&gt;
    
    </summary>
    
      <category term="Solution" scheme="https://memset0.cn/categories/Solution/"/>
    
    
      <category term="网络流" scheme="https://memset0.cn/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最小费用最大流" scheme="https://memset0.cn/tags/%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
</feed>
